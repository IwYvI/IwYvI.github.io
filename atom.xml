<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IwYvI</title>
  
  <subtitle>干了这碗鸡汤</subtitle>
  <link href="https://www.iwyvi.com/atom.xml" rel="self"/>
  
  <link href="https://www.iwyvi.com/"/>
  <updated>2021-02-17T10:00:38.998Z</updated>
  <id>https://www.iwyvi.com/</id>
  
  <author>
    <name>iwyvi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的工具列表</title>
    <link href="https://www.iwyvi.com/tools/awesome-tools/"/>
    <id>https://www.iwyvi.com/tools/awesome-tools/</id>
    <published>2019-11-10T15:27:00.000Z</published>
    <updated>2021-02-17T10:00:38.998Z</updated>
    
    <content type="html"><![CDATA[<p>此列表收集了我的各种工具，包括硬件、软件和服务。<a id="more"></a></p><blockquote><p>文章托管在 GitHub 独立仓库中，用于及时修改和记录版本<br><a href="https://github.com/iwyvi/awesome-tools">https://github.com/iwyvi/awesome-tools</a><br>以下为最新的内容</p></blockquote><div id="markdown-main" style="border: 2px solid #ff9599;padding: 20px;"></div><script src="https://cdn.bootcss.com/markdown.js/0.5.0/markdown.min.js"></script><script>var req = new XMLHttpRequest();req.open("GET",'https://raw.githubusercontent.com/iwyvi/awesome-tools/master/README.md',true);req.onreadystatechange = function() {  if(req.readyState === 4 && req.status === 200) {    var container = document.getElementById('markdown-main');    var md = req.response.replace(/!\[(.*)\]\((.*)\)/g,'![$1](https://raw.githubusercontent.com/iwyvi/awesome-tools/master/$2)')    container.innerHTML = markdown.toHTML(md);  }};req.send(null);</script>]]></content>
    
    
    <summary type="html">&lt;p&gt;此列表收集了我的各种工具，包括硬件、软件和服务。</summary>
    
    
    
    <category term="tools" scheme="https://www.iwyvi.com/categories/tools/"/>
    
    
    <category term="tools" scheme="https://www.iwyvi.com/tags/tools/"/>
    
    <category term="awesome-list" scheme="https://www.iwyvi.com/tags/awesome-list/"/>
    
  </entry>
  
  <entry>
    <title>hori ngc手柄使用感受</title>
    <link href="https://www.iwyvi.com/joystick/hori-ngc-controller-review/"/>
    <id>https://www.iwyvi.com/joystick/hori-ngc-controller-review/</id>
    <published>2019-02-11T05:35:00.000Z</published>
    <updated>2021-02-17T10:00:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>去年年底，我购入了任天堂明星大乱斗。在被电脑各种暴打之后，我认为主要是手柄的问题（并不），而只有ngc布局的手柄才能拯救我。在考察了原装ngc手柄+转接器和直连的ngc手柄这两种方案之后，我最终买了hori的这款ngc布局手柄。<a id="more"></a></p><p>入手的方式依然是淘宝，大约190左右。</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>这款手柄只是一个“单纯”的手柄，支持xbox手柄全部按键，不带震动、体感和nfc，但是支持switch的home键和截图键。额外支持交换 r-zr, l-zl 键（默认就是交换状态），以及支持按键连发。</p><p>手柄只能有线连接，接口是usb-a接口，可以直接接入switch tv模式底座，如果使用掌机模式需要配otg线。另外手柄home键无法唤醒机器。</p><h4 id="外观和手感"><a href="#外观和手感" class="headerlink" title="外观和手感"></a>外观和手感</h4><p><img src="https://i.loli.net/2019/02/11/5c6111bb8d1c3.jpg"><br><img src="https://i.loli.net/2019/02/11/5c6111bba1a7d.jpg"></p><p>整体手柄看起来塑料感十足（比较廉价），顶部为不透明的乳壳塑料，下面是半透明的塑料，外观确实不怎么好看。</p><p>手柄是ngc布局，与原装ngc手柄不同的是左边有 l 和 zl 两个肩键，switch的相关操作键都在手柄中间，分别是 - 、+ 、截图、连发和home键。</p><p>四个肩键都是非线性按键，手感尚可；肩键布局与正常switch手柄相反，但是可以在插入手柄时选择交换后的模式。</p><p>手柄的主要特点在于abxy四个键的布局与xbox系列手柄分布不同；然后左右摇杆均为8向摇杆，可以进行精确定位。</p><p>abxy四个按键的键程适中，按起来还是比较舒适的。方向键是非分体式，黏连表现尚可，但是按起来比较硬。</p><p>整体手柄感觉比较高，似乎是因为握把比较细长。长时间用的话拇指会比较难受。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>单纯是为了大乱斗买的手柄，虽然买了以后依然被电脑各种暴打。稍微有点操作加成，体现在A键极大，b键不好按，让我养成了少用尹相杰的好习惯。</p><h6 id="pros"><a href="#pros" class="headerlink" title="pros:"></a>pros:</h6><p>手感尚可</p><p>switch支持较为完整</p><p>大乱斗蜜汁加成</p><h6 id="cons"><a href="#cons" class="headerlink" title="cons:"></a>cons:</h6><p>外观较廉价，塑料感极强</p><p>无振动</p><p>略贵（以实际外观和操作体验做比较）</p><p>只能有线连接（线约3m）</p><p>大乱斗被暴打以后缺少了一个借口</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;去年年底，我购入了任天堂明星大乱斗。在被电脑各种暴打之后，我认为主要是手柄的问题（并不），而只有ngc布局的手柄才能拯救我。在考察了原装ngc手柄+转接器和直连的ngc手柄这两种方案之后，我最终买了hori的这款ngc布局手柄。</summary>
    
    
    
    <category term="joystick" scheme="https://www.iwyvi.com/categories/joystick/"/>
    
    
    <category term="joystick" scheme="https://www.iwyvi.com/tags/joystick/"/>
    
    <category term="hardware" scheme="https://www.iwyvi.com/tags/hardware/"/>
    
    <category term="hori" scheme="https://www.iwyvi.com/tags/hori/"/>
    
  </entry>
  
  <entry>
    <title>多路音源的合并输出</title>
    <link href="https://www.iwyvi.com/audio/simple-way-to-merge-multi-sound-source/"/>
    <id>https://www.iwyvi.com/audio/simple-way-to-merge-multi-sound-source/</id>
    <published>2018-03-18T09:11:15.000Z</published>
    <updated>2021-02-17T10:00:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>过年期间，看到乌贼群里的人一边在qq上语音一边玩游戏，对于我这种生活环境不适合开外放只能长期耳机的乌贼来说，耳机连了语音就不能听游戏声音，所以在游戏里只能被打爆乌头。直到最近，我终于在网上发现了一种可以将多路音频源合并到同一个耳机的方案。<a id="more"></a></p><blockquote><p>目标：使用一个耳机同时听switch、手机和电脑的声音</p></blockquote><p>这个方案的核心是一个耳机分线器。</p><p><img src="https://i.loli.net/2018/09/08/5b935ee0af53b.jpg"></p><p>在三月的某一天，突然在知乎上看到有人问了和我的需求差不多的问题（<a href="https://www.zhihu.com/question/20942127">如何制作一个能同时接两个音源的耳机？</a>），然后底下有人回答可以使用耳机分线器来转接，因为音频线是模拟信号，最终信号都是会混到一起，然后当天我就在某宝上面买了一个这样的分线器。（买的时候我还专门注意了一下，找了一个可以连接麦克风的分线器，也就是支持四段式耳机的）</p><p>之后还单独买了三根四段式的对录线（也叫aux线），用于连接各种设备。</p><p>一开始测试了手机和电脑同时连接，输出端使用了带线控的四段式耳机，发现可以正常合并两个设备各自的声音，然而耳机的麦克风和线控没有用。想到我这台电脑虽然只有一个音频接口却不支持四段式耳机（没错就是华硕），所以拔掉电脑的音频线，果然线控和麦克风就可以在手机上用了。</p><p>这时我有了一个奇妙的想法，似乎可以空接四段式耳机线的麦克风线来让电脑插进来的同时支持线控（这句话我也不知道我自己说了什么，反正就是感觉自己很厉害的那种术语就对了）。实现方式是先找了一个买耳麦送的二转一的转接器（一个音频接口一个麦克风接口转成一个四段式插头的那种转接器），将四段插头接入分线器，然后把电脑端的输出接到另一边的音频接口处。结论是线控依然可以用。</p><p>然后综上所述，我又单独买了两个二转一的转接器，把所有需要接入的不支持四段式的接口都用转接器中转一遍，保证连接手机时的线控是正常的。（PS: 那种本来就有两个接口的耳麦插到转接器的麦克风端以后线控就会失效，目前解决方案就是不插麦克风，需要麦克风时换手机耳机）</p><p>当我把switch也接入这个系统时，出现了另外一个问题，就是有时会有电流噪音（反正听见噪音就超级难受）。最开始想在淘宝上找一找有没有什么音频降噪器，发现没有单纯降噪的设备，之后发现了一种叫做音频共地隔离器的东西，根据产品说明，解决的是共用同一个电源的设备间音频噪音的问题，似乎和我这里出现的问题有点像。然后经过多次分离变量分析，我发现噪音只有switch接入底座时才会出现，而使用电池供电时就没有，大概率是这种共地噪音，终于在前两天买了一个共地隔离器。</p><p>然后，就是在我写这篇博客的中午，我把这个隔离器接入了这个简陋的音频系统，同时打开了switch和电脑，惊奇地发现噪音消失了，然而代价是接入隔离器的音源音量会稍微有所降低，最终我选择把隔离器接在了电脑与分线器之间。至于使用隔离器会不会使音质有所降低，反正我使用辣鸡耳机外加木耳并没有听出来什么区别。</p><blockquote><p>这里是所有设备的价格：</p><ul><li>耳机分线器：12.8</li><li>四段式对录线 * 3：6.8</li><li>二转一转接器 * 2：4.9</li><li>音频共地隔离器：23</li></ul></blockquote><p>总的来说我对这次的音频线路和设备的改造非常满意，终于可以一边开黑一边玩游戏了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;过年期间，看到乌贼群里的人一边在qq上语音一边玩游戏，对于我这种生活环境不适合开外放只能长期耳机的乌贼来说，耳机连了语音就不能听游戏声音，所以在游戏里只能被打爆乌头。直到最近，我终于在网上发现了一种可以将多路音频源合并到同一个耳机的方案。</summary>
    
    
    
    <category term="audio" scheme="https://www.iwyvi.com/categories/audio/"/>
    
    
    <category term="hardware" scheme="https://www.iwyvi.com/tags/hardware/"/>
    
    <category term="audio" scheme="https://www.iwyvi.com/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>switch pro手柄使用感受</title>
    <link href="https://www.iwyvi.com/joystick/switch-pro-review/"/>
    <id>https://www.iwyvi.com/joystick/switch-pro-review/</id>
    <published>2018-03-11T14:41:10.000Z</published>
    <updated>2021-02-17T10:00:39.001Z</updated>
    
    <content type="html"><![CDATA[<p>过年期间稍微挣了一些钱，终于在上周下定决心买了一个很早就想入手的switch pro。到现在大概也玩了好几天了，现在来说一下这个手柄的使用感受。<a id="more"></a></p><p>手柄入手方式是淘宝，年前有一段时间手柄普遍降价了，普通黑色大概在380左右，但是年过完又稍微涨了一些，我是403包邮买到的。（话说本来还有一家400包邮来着，但是一看包的是圆通，正好这几天我的其他几个网购的东西包圆通快递的一个都没到，甚至有一个已经在路上拖了一周了，因此选择了这家包申通的）</p><p>拆开快递以后发现盒子比我想象中的要小一圈（与steam手柄和xbox手柄的盒子相比）</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>当然是支持switch所有支持的功能了，包括手柄所有键位+体感+nfc</p><p>和之前八位堂手柄比起来，这个手柄还支持switch的待机唤醒，和joycon一样可以在switch待机的时候按home键唤醒主机</p><p>使用的是usb typec接口，似乎机器上可以设置只用有线连接的模式</p><h4 id="外观和手感"><a href="#外观和手感" class="headerlink" title="外观和手感"></a>外观和手感</h4><p><img src="https://i.loli.net/2018/09/08/5b935f364cbea.jpg"></p><p>外观就是标准xbox布局，abxy四个键很大，肩键也很大，完全不会误按，-和+键的布局比joycon合理得多，可以轻松按到</p><p>整体手柄的持握感觉出色，按键反馈灵敏，肩键按键手感很棒，只是扳机键是<code>段落按键</code>而不是线性扳机。与joycon的按键有明显的贴片按钮感觉和肩键有微动感觉不同的是，pro手柄的按键感觉和普通手柄是类似的，肩键有相对较软的段落感，整体按键没有什么声音。</p><p>对于我来说，手柄的握把稍微有点小，不能在持握过程中撑满手掌，不过手小的话应该会很舒适。</p><p>摇杆按键清脆，摇动角度增加，对比joycon有很大提升</p><p>方向键采用非分体式，不过确实有黏连</p><p>然而今天下午我又发现一个问题，就是L和R这两个肩键存在一定的触发问题：当这两个键轻按的时候，有一定几率不触发，或者连续按压时施加的力稍微轻一点触发就会中断，从网上来看并不是个例。</p><p>手柄支持hd震动，这一点比八位堂的手柄不知道高到哪里去了</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>之所以买这个手柄有以下几个原因（按优先级排序）</p><ol><li>被种草</li><li>狗头玩喷射战士总是误操作，按跳跃键有时会碰到右摇杆</li><li>八位堂手柄没有握把很累，而且没有nfc导致喷射战士进入大厅后每次都会卡顿，然后提示nfc错误</li></ol></blockquote><p>手感很好</p><p>支持hd震动</p><p>有点小贵</p><p>电池续航不错（买上到现在只充过一次电）</p><p>switch支持完善</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;过年期间稍微挣了一些钱，终于在上周下定决心买了一个很早就想入手的switch pro。到现在大概也玩了好几天了，现在来说一下这个手柄的使用感受。</summary>
    
    
    
    <category term="joystick" scheme="https://www.iwyvi.com/categories/joystick/"/>
    
    
    <category term="joystick" scheme="https://www.iwyvi.com/tags/joystick/"/>
    
    <category term="hardware" scheme="https://www.iwyvi.com/tags/hardware/"/>
    
    <category term="switch pro" scheme="https://www.iwyvi.com/tags/switch-pro/"/>
    
  </entry>
  
  <entry>
    <title>八位堂SF30pro手柄使用感受</title>
    <link href="https://www.iwyvi.com/joystick/8bitdo-gamepad-review/"/>
    <id>https://www.iwyvi.com/joystick/8bitdo-gamepad-review/</id>
    <published>2017-12-30T08:04:08.000Z</published>
    <updated>2021-02-17T10:00:38.998Z</updated>
    
    <content type="html"><![CDATA[<p>目前来看八位堂SF30pro应该是少有的几个可以支持switch陀螺仪的第三方手柄，又因为switch pro有些贵，所以我在双十一的时候预购了这个手柄，手柄在12月9日才发货，然而因为手柄自身的问题，中途又换了两次，目前拿到手的手柄“现在”还没有什么问题，然后现在来说一下对这个手柄的使用感受。<a id="more"></a></p><p>手柄双十一预购价格239，同时买的还有一个10元的套在手柄上的手机支架。</p><p><img src="https://i.loli.net/2018/09/08/5b935cc2289bb.jpg" alt="八位堂手柄"></p><h4 id="外观和功能"><a href="#外观和功能" class="headerlink" title="外观和功能"></a>外观和功能</h4><p>这个手柄还是比较便携的，大小的话和5.5寸屏的手机差不多。</p><p>外观采用了超任手柄的设计，只是多了两个摇杆。</p><p>虽然这个手柄看起来比较小，但是是一个全功能的手柄，包括所有手柄需要的按键，只是LT和RT键为段落式按键而非线性扳机，这在非赛车游戏中影响不大（大概是因为switch的手柄也是段落式按键）。</p><p>此外手柄还额外有两个键，在switch模式下用作截图键和home键，在非switch模式下用作（就是xbox手柄的那个xbox键，这个键我也不知道叫什么）和连发开关。</p><p>手柄支持四个模式，分别是switch模式，xinput模式，dinput模式和一个大概是ps4手柄模式，这四个模式可以分别匹配机器，不需要重新配对（这一点我觉得就很方便）。可以一次配对好手机电脑和switch，之后需要玩哪个就打开哪个模式。</p><h4 id="手感"><a href="#手感" class="headerlink" title="手感"></a>手感</h4><p>因为便携性，这样的手柄还是牺牲了手感。</p><p>然而这个手柄的摇杆还是很舒服的，包括移动、归中和按键的感觉都很不错，虽然比起xbox手柄还是有一定差距，但是这个手柄的摇杆比xbox手柄要明显小一圈，所以有这样的手感还是很惊艳的。（当然比起switch的joycon就不知道好到哪里去了）</p><p>abxy这四个按键手感也比较好，按键清脆。</p><p>十字键相对来说没有那么舒服，虽然是分体十字键直接按压时不容易误按，但是整体有些偏硬，而且按下以后更换方位没有相关反馈，不是很理想。（我已经忘了xbox的十字键按下去是什么感受了）</p><p>LB和RB键按键很长，按压有段落感，整体感觉较软，而且声音比较小。同时比较明显存在的问题就是，按下之后有可能不持续触发，然后这一问题经过我的仔细研究，发现是这两个键按下之后，在按压力度变轻但并没有到回弹点时，也会停止触发按键。大概是整体的设计问题。</p><p>LT和RT键略做了扳机效果，但是是段落按键，构造和switch的joycon有点像，按键应该是硅胶碗提供的回弹，与LB和RB键的手感一样。</p><p>体感的话目前只支持switch，和正常手柄体感操作一致。我个人的话是很希望以后固件升级可以在steam上使用体感。</p><p>同时手柄还配有震动，震动感觉就是手机的震动那样，相对比较震手。在pc上表现比较好，但是switch上hd震动会触发一些蜜汁震动，例如本身hd震动很轻微的效果在这个手柄上就震得很厉害。</p><p>然而因为这个手柄没有握把，因此在长期使用后会比较累。同时摇杆位置与ps4手柄一致，长时间行走的话左手拇指会比较酸。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我之所以买这个手柄，有一部分原因是这个手柄相比switch pro更便宜，另一方面是这个手柄能很稳定的在多平台使用，平时可以只带这一个手柄出去玩。</p><p>然后整体使用手感一般，不是很适合长时间使用。</p><p>蓝牙连接较快，使用时间比较长。</p><p>外观还不错。</p><p>功能支持比较完善。</p><p>switch上震动略傻。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前来看八位堂SF30pro应该是少有的几个可以支持switch陀螺仪的第三方手柄，又因为switch pro有些贵，所以我在双十一的时候预购了这个手柄，手柄在12月9日才发货，然而因为手柄自身的问题，中途又换了两次，目前拿到手的手柄“现在”还没有什么问题，然后现在来说一下对这个手柄的使用感受。</summary>
    
    
    
    <category term="joystick" scheme="https://www.iwyvi.com/categories/joystick/"/>
    
    
    <category term="joystick" scheme="https://www.iwyvi.com/tags/joystick/"/>
    
    <category term="8bitdo" scheme="https://www.iwyvi.com/tags/8bitdo/"/>
    
    <category term="sf30pro" scheme="https://www.iwyvi.com/tags/sf30pro/"/>
    
    <category term="hardware" scheme="https://www.iwyvi.com/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>新键盘之ergodone</title>
    <link href="https://www.iwyvi.com/keyboard/ergodone-keyboard/"/>
    <id>https://www.iwyvi.com/keyboard/ergodone-keyboard/</id>
    <published>2017-06-21T09:37:58.000Z</published>
    <updated>2021-02-17T10:00:38.999Z</updated>
    
    <content type="html"><![CDATA[<p>距离第一个客制化键盘购入还没满一年，我又入坑了一个新的键盘。</p><p>ergodone是一个分体式机械键盘，是基于ergodox的一个平民化修改版，相比ergodox原版的材料来说，这个的各种元件的价格更加便宜。<a id="more"></a></p><p>关于了解到这个键盘，实际上经历了一个复杂的过程。最初是想在儿童节期间买个什么好玩的东西，然后想起了客制化键盘，先是在淘宝店里看到了staryu和cospad。staryu虽然看上去很好玩，但是价格有点高，而且没有什么实际的作用，而cospad相比价格更加合理一些，然后也可以有更多的玩法，所以最初是想买一片cospad来玩的。后来去了<a href="http://www.keyboard-layout-editor.com/">kle</a>，突然觉得分体键盘也很有趣，而cospad也可以当作分体planck来用，然后机缘巧合又研究了一下那个网站里所有的分体键盘布局，通过搜索ergodox发现了ergodone。后来又发现一整套ergodone价格其实比买一块cospad并没有贵多少（除了键帽），所以又多研究了几天，最终下决心要买一套ergodone。</p><blockquote><p>一套ergodone的价格大概是：</p><ul><li>pcb + 元件 + 亚克力外壳 + 对录线：249 + 20（运费） = 269</li><li>5脚g轴 * 76：1 * 76 ≈ 80（因为轴都是按整数来卖）</li><li>pcb卫星轴(2×) * 4：15（只有一家的价格是这样的，其他的都是25一套）</li><li>usb typeB线：10+或0（我是用了以前键盘的线）</li><li>键帽：0 ~ +∞（穷人不敢买键帽，然后淘宝上全套的ergodox键帽有119的和129的，在写这篇文章的时候我正在用OEM键帽乱组出来的参差不齐的一套）</li><li>各种工具（电烙铁，螺丝刀，焊锡等）：？</li></ul><p>所以到目前为止，我一共用了364元+20元工具<br>更新：我还是上了119的键帽，因为现在的键帽实在是太奇怪了而且各种残缺。<br>另外为了支撑键帽，我还买了两套笔记本散热用的硅胶支撑垫，然后吸在了底部亚克力上面，这个用了6元。</p></blockquote><p>淘宝上只有一家在卖ergodone，然后还是抢购，所以我从儿童节一直等到17号考六级的那个中午才抢到。</p><p>这次因为直插二极管没有了，所以部长发的是贴片二极管。讲真看到贴片二极管我很慌，因为我还依稀记得小时候不小心扣掉了一个贴片led，然后就再也没有焊上去过。</p><p><img src="https://ooo.0o0.ooo/2017/06/21/594a534c701c7.jpg"></p><p>这次的键盘仍然是主红轴功能键混轴的形式，等我下次拆键帽的时候再照一下混轴方案的图吧。主要思想还是tab，backspace，enter，win键段落轴，拇指黑轴，shift白轴（g轴的白轴比红轴轻，触发力度似乎是35g？），esc茶轴。</p><p>然后ergodone本身没有设计按键灯，所以只用装一下键盘上的三个指示灯，然后我选了三个暖白（事实上这是一个错误的选择，因为这三个灯在一起，亮了以后不数是哪个灯根本不知道是什么的指示灯，应该选三个不同的颜色）。</p><p>因为太久没有焊过东西了，所以刚开始焊主控的时候各种不熟练。在焊接usb的飞线时，不小心还把上面的塑料焊出了一道坑。之后焊贴片二极管，发现如果不是二极管太小不容易找的话，实际上焊起来还是挺容易的，而且不用担心虚焊什么的问题。最后用了半个下午加一个晚上焊完了所有键盘。</p><p>焊的时候还不小心在剪刀上留下了一道印记…</p><p>（第二天仔细看了一下晚上眼睛都睁不开的时候焊的焊点，丑的简直不忍直视）</p><p>ergodone的外壳由五层亚克力组成，其中有一层是轴的定位板。pcb上的轴孔开得比较小，插轴的时候十分紧，导致之后大拇指疼了一整天。</p><h4 id="配列"><a href="#配列" class="headerlink" title="配列"></a>配列</h4><p>之后就是根据最初的设想刷配列，这个和刷gh60的方法基本上差不多。</p><p>这次用的是yang的新键位编辑器<a href="http://ydkb.io/">YDKB</a></p><p>然后配列这几天修改了很多次，这个是目前最新的一个版本：<a href="http://ydkb.io/?ergodone#456C4oOW4Kmg6biL5oKGcOOOiNeA5rWM4YaA7LCD5oCG6KyB7aOw1oDimKPkrKvmq7HssoLpoJXog4PooKDguILTouKAgYDKBGEuuWiqu6IpOysi8K615HmkKLkoo/is7zipIjqnYLplIrjoIjliaHktoXkiJXjoZHuhZ/ouKHjorLsvYPoqo7jtozgo6Pmvp3unJzjsbPvjKLhj4LsjKTguaLqjKPtjKHujKPmjKDuj4Dnmo7mn6HmiJHmjqHmiqHmj5HmlaPmhaTikqXul6Xsr5btiKnooKrqi6DhiYrrlK7miKjgs6Psh6Psn6biiJbijqbigorqlKDimKPoqaDvhbbuvavqrpHmh6bik6biiaLuj5LukZvmi6Tii6TuhKTmq6ful6Lhl6Pql6Lqka3uiaXuhpPpl6Til6Tul6HuhKzhiJLsgJHhhbThnKjhj6zji7rjn5XvtLLvt4zrvYviv43kl7HrjInusbLisKjpoYfqlobkoqTkkJzhm4Psionlj7nvkIbmsbHok43ovpnqoqztsLrhnILotKDnj4joo5TrqKHotJ3sgKDrhozpiIHrrJjkvqDknJDhsIrkmb7okY3liKPvgrDpmJXjj5Xoj7PuiLLkkYTmuY3iuZ3ioZXsr6Lvi5nnkrvknK/sl73oporulZnhjovhhpTsiZLssJ7ihZ7luazlkKvllJbpraXqmp3mrrbjra3gu5vmrqrtpYvrmrDtpKrnjILisYHmpbTooonsqKLiiojmn4/mlajilabmuaHpkZbuoY/kiqnkurvmmrjsnrLihrDpjKnvjaXhoorouqblhqntqb3nj5Djop7nlJrnj5XvrZXmirbvm4Xon53niaTtirfph4DmlIvpuIHrq5rqjYXqh5Dij7TsmZPhm5/ktaXrhKbps67lnKTpurzsjpzop4vnmrLktKzkoYfkkZnijI7sjKLui5nspI/vjIXomqrnmpLspInqsqfpn7Pqra/mirHlkaXupojki67hgovovaDvk57ul5fjuInsvYbngbHnmarlm6bug4fklYLukY3srKXproXlprjim43thbXjma/sg6XikZTlnZ7umr3ivJXku7LsjJ3ksKvvm4zgo7Plh6LugrjgqYXrl4PigpzioonppJnluIHsj4DoiLrgvILqgJjnmInoj4DtoLzhgoPsg4DokLroq4LtqaziqpDuoojsrZ/gsqPgo4njirXmtqTvhLPvkZTjibfhq4TugpnnnJvigonug5vtmY7qlKHnno/inbDunZ/ht4PqgrzljKvor5HsoIbironui7jrpKLkt43ktJ7jtqDgorPcpYDKBWTqOuNquWigeWHnOYDKBrjYDKByyvMuC7LuP65CU64S36L2Z7pWO466O7pa46Z6b7KCZ662F5J6l55Wo6Zie6K6R4aO24aaN5oys6Lim7L2g7Jyc6beB7KGY7JmE4qyZ6ImA7aiq74mE46Kl5I6K65mO4qCM5ZKE6JSY4omr6Imf4qOV4Yyv5pqo5Y6L6bmo6rCz4aan1JDqjbLTsYDKBW8suqJtOuktuuOmuKtkeqtiemQqRfsoIA=">地址</a></p><p>这一次把八层全部使用上了，第0层默认qwerty键盘，第一层dvorak键盘，第二层随便编了一个单手键盘布局，第三层游戏模式，第四层小键盘，第五层f区，第六层单手布局的meta层，第七层主要meta层。</p><p>然后键盘主控上还有两个指示灯，可以指示当前是在哪一层上面，使用本地刷机工具的话似乎是默认0层什么都不亮，1层亮上面的灯，2层亮下面的。</p><p>今天早上下单了一个笔记本脚垫，不知道能不能用在键盘上。然后现在还很想买一套专用的键帽，因为现在的大量1.5×的位置还在用1.25×的键帽，然后拇指的那两个键则是倒置的小键盘enter和0，其他键帽则是随便乱配。</p><p><img src="https://ooo.0o0.ooo/2017/06/21/594a534c4778c.jpg"></p><p>之后有时间可以尝试在表层亚克力上贴上碳纤维膜，然后学一下怎么加底灯。</p><p>更新：已经把碳纤维膜加好了，看起来美滋滋（就是主控默认的红灯一直在亮成一团，然后就是之前指示灯的问题，现在极难分辨出是什么指示灯在亮），等键帽来了一起照几张照片。</p><h4 id="手感"><a href="#手感" class="headerlink" title="手感"></a>手感</h4><p>虽然按键位置与标准键盘相比有一定的位移，但是总体来说如果之前的指法比较规范的话实际上还是能较好的适应的。</p><p>用了这两天最明显的问题是数字键会经常按错位，比如2总是按成1。还有发现了之前我一直使用左手食指按c的问题。</p><p>然后主要的变化是以前全部属于右手小指的很多键位平分到了食指和大拇指的区域里。</p><p>可能是因为我暂时还是使用oem高度的键帽，拇指的按键感觉有点高，不是很舒服，等之后买了矮一点的键帽再来试一下。</p><p>然后目前来看因为键位位置不够熟悉，所以玩游戏的时候还是感觉不习惯。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整体键盘的价位比较合适，就是需要花时间自己来焊接各种原件。</p><p>然后键帽不是很好配（意思是加钱上豪车）。</p><p>然后操作需要一段时间来适应，听说会有适应以后回不去普通键盘的症状。</p><p>外壳不够好看（可以通过上碳纤维的车解决）。</p><p>整体大小和占用空间比gh60要大一些（因为拇指区突出来的原因）。</p><p>无法直接加按键灯。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;距离第一个客制化键盘购入还没满一年，我又入坑了一个新的键盘。&lt;/p&gt;
&lt;p&gt;ergodone是一个分体式机械键盘，是基于ergodox的一个平民化修改版，相比ergodox原版的材料来说，这个的各种元件的价格更加便宜。</summary>
    
    
    
    <category term="keyboard" scheme="https://www.iwyvi.com/categories/keyboard/"/>
    
    
    <category term="hardware" scheme="https://www.iwyvi.com/tags/hardware/"/>
    
    <category term="ergodone" scheme="https://www.iwyvi.com/tags/ergodone/"/>
    
    <category term="keyboard" scheme="https://www.iwyvi.com/tags/keyboard/"/>
    
    <category term="ergodox" scheme="https://www.iwyvi.com/tags/ergodox/"/>
    
  </entry>
  
  <entry>
    <title>steam手柄使用感受</title>
    <link href="https://www.iwyvi.com/joystick/steam-controller-review/"/>
    <id>https://www.iwyvi.com/joystick/steam-controller-review/</id>
    <published>2017-02-15T11:46:00.000Z</published>
    <updated>2021-02-17T10:00:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过过年期间认真研究，查看了国内外许多论坛和科技媒体的评测，我最终在几天前买了Steam Controller。通过这几天的试玩，我对其基本性能已经比较了解了，所以现在来说一下自己的感受<a id="more"></a></p><p>由于国内没有行货出售，因此我选择了淘宝购入。原装盒装手柄加上过年期间的顺丰和手柄包，一共是358元。</p><p>手柄的开箱图片以后有时间再补吧，因为真正开箱的时候并没有拍照，只能再摆拍一遍。</p><p>在此之前只用过北通斯巴达手柄，所以下面的手感比较的参照物均为北通斯巴达手柄，之后再找dalao们看看有没有xbox one精英版手柄可以体验一下。</p><p><img src="https://i.loli.net/2018/09/08/5b935f1d98e1e.jpg"></p><p>手柄外观没什么能评价的，至少我觉得挺好看的，虽然看起来塑料感比较严重。</p><p>可以使用microUSB连接直接使用，也可以安装电池插上无线接收器使用。</p><h4 id="手感"><a href="#手感" class="headerlink" title="手感"></a>手感</h4><p>整体手柄还是比较大的，握手的部分不同于xbox系列，是朝上弯曲的，主要目的是改变拇指的操作范围，整体手掌比较贴合，但是在拇指及指腹部分则完全悬空。握手部分均为磨砂塑料。</p><p>左摇杆手感没有什么特别的地方，移动感觉稍微硬一点。</p><p>XYAB键位置在xbox手柄右摇杆处，略有不习惯，而且按键稍微要小一点，X和A按起来稍微有点远。</p><p>LB和RB很大，按键硬度很大，需要适应一下。</p><p>LT和RT的键程比较短，二段扳机按键硬度中等，在激烈操作中比较容易误按。</p><p>LG和RG为背键，可以用中指和无名指按，硬度适中，但是声音略闷。</p><p>下面说一下左右触控板，触控板可以触摸和点击。<br>默认桌面模式下，左触控板为鼠标滚轮，顺时针旋转为向下滚动，逆时针为向上。右触控板控制鼠标，操作感觉有点像笔记本电脑的触控板，但是具有一定的轨迹球性质，即离开触控板以后鼠标还将继续移动一段距离。同时触控板在触摸时均有震动的触感反馈，滚轮的反馈为每移动一个格的距离时左手单机震动一下，触控板的反馈为持续的震动，在轨迹球模式下能感受到移动方向和轨迹球持续滚动的震动。（默认震动反馈强度为强，因此震感较大，而且声音也比较大）。</p><p>在作为摇杆的情况下，触控板可以选择鼠标摇杆、摇杆视角和摇杆移动三种模式。鼠标摇杆和模拟鼠标的手感一致，但是相关信号仍然为摇杆信号。摇杆视角的控制方式似乎是以每次开始触摸地方为摇杆中心，操作类似非固定型的手机屏幕摇杆，触感反馈为离开始触摸的中心越远震动越强。摇杆移动是以触摸面板的物理中心为摇杆中心，可以设置最大区域，在区域内有摇杆的动态位置增量，在最大区域外则等于摇杆边缘，触感反馈为区域内震动逐渐增强，到区域边缘有很强的一下震动，区域外无震动。</p><p>触控板作为按键组时，每次切换按键范围会有一下震动。</p><p>总体来说触控板因为有触感反馈，所以不会误按。左触控板通常作为方向键或按键组，定位和按键都十分准确。右触控板使用摇杆视角和摇杆移动模式时，总是感觉不是很习惯，因此我通常选择使用鼠标摇杆模式。</p><p>陀螺仪很稳，控制视角很棒，还可以分别配置水平和垂直的移动程度。</p><p>但是！但是因为手柄没有专门用于游戏震动的电机，在游戏震动表现上只能借助于触感反馈的震动电机，手感很不理想，同时声音也<del>比较大</del>（是很大）。（注：长期震动后手都有些麻）</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>手柄配置十分十分全面，就是需要打开大屏幕模式才能设置，这一点比较麻烦。</p><p>各种游戏软件都能导入steam里运行，然后就可以分别配置按键了。</p><p>部分游戏有UAC，这时需要以管理员身份运行steam才可以控制。（新版beta客户端似乎对UAC检测有更新）</p><p>每个按键的配置包括单击、双击、长按、按下、松开、其他按键按下后，可以设置单键或组合键。触控板、扳机、摇杆均可以设置死区和响应曲线。同时还可以设置不同的按键布局，可以在按下特定按键或鼠标消失显示时切换。</p><h4 id="游戏体验"><a href="#游戏体验" class="headerlink" title="游戏体验"></a>游戏体验</h4><p>这几天我试了很多游戏，以下是列表：</p><ol><li>Awesomenauts</li><li>Dead or Alive</li><li>Dmc - Devil May Cry</li><li>GTAV</li><li>MGSV</li><li>Orcs Must Die 2</li><li>Ori</li><li>Overcooked</li><li>Overwatch</li><li>Saints Row IV</li><li>Witcher 3</li><li>For Honor beta</li><li>无尽战区</li><li>古墓丽影9</li></ol><p>前十二个游戏均原生支持xbox手柄，所以开始时均设置为模拟xbox手柄，设置后可以正常使用。</p><p>其中部分游戏有社区方案，例如合金装备5有一个模拟键鼠的方案，但由于之前我一直使用手柄玩，因此不是很懂方案里各种按键有什么用又改了回来，同时使用键鼠方案的话没有辅助瞄准，比较尴尬。</p><p>Overcooked中可以和xbox手柄一起使用。</p><p>守望先锋里因为手柄操作并不舒服，因此自定义了一个键鼠方案，视角使用右触控板和陀螺仪一起控制，然后玩了几盘，然后就换回了键鼠，除了根本瞄不准人以外，没什么毛病，猩猩三妹什么的就很强。</p><p>巫师3使用了社区方案，左触控板作为触摸菜单，可以显示9个按键，虽然没用手柄本身的方案玩，但总感觉这么多按键手柄要么阉割操作，要么就需要很多组合键。</p><p>荣耀战魂提供了官方手柄配置预设，总体和xbox手柄操作一致，额外提供了背键的绑定和在防御姿态下右触控板按钮的变换。我因为玩了野武士，隐藏姿态在键鼠操作时为按下c键，而手柄为右摇杆向下，极易误操作，因此我额外将左摇杆的完全按下改为右摇杆向下，很完美。</p><p>无尽战区完全没有提供手柄支持，但是通过一翻设置，操作完全不输键鼠。左触控板使用径向菜单，实现1-6的数字键，用来购买装备，在RG按下的情况下则显示一些不常用的按键，包括b、g、c、v、f1、f2、f3等。</p><p>综上所述，steam手柄在原生支持手柄操作的游戏中可以实现无缝切换使用。但是在完全不支持手柄操作的游戏中，仍然可以实现很棒的体验。</p><hr><p>2月22日：前几天玩了古墓丽影9，我使用了一个社区配置，主要方案还是标准xbox手柄，但是在射击模式下可以使用陀螺仪，操作感十分棒，有一种真正瞄准的感觉，让我更容易（误）爆头。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>手柄整体使用体验较好，可以完美模拟xbox手柄，也可以模拟键鼠操作，使用范围很广。</p><p>操作手感较好，功能按键较小，LB和RB较硬。</p><p>游戏震动体验很差。</p><p>开关机一定要播一段8位音乐。</p><p>无线操作距离约在10m左右。</p><p>外观塑料感较强。</p><p>放上电池略重。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;经过过年期间认真研究，查看了国内外许多论坛和科技媒体的评测，我最终在几天前买了Steam Controller。通过这几天的试玩，我对其基本性能已经比较了解了，所以现在来说一下自己的感受</summary>
    
    
    
    <category term="joystick" scheme="https://www.iwyvi.com/categories/joystick/"/>
    
    
    <category term="joystick" scheme="https://www.iwyvi.com/tags/joystick/"/>
    
    <category term="hardware" scheme="https://www.iwyvi.com/tags/hardware/"/>
    
    <category term="steamcontroller" scheme="https://www.iwyvi.com/tags/steamcontroller/"/>
    
  </entry>
  
  <entry>
    <title>由jekyll转为hexo</title>
    <link href="https://www.iwyvi.com/hexo/change-to-hexo/"/>
    <id>https://www.iwyvi.com/hexo/change-to-hexo/</id>
    <published>2016-10-04T09:47:22.000Z</published>
    <updated>2021-02-17T10:00:38.998Z</updated>
    
    <content type="html"><![CDATA[<p>大概就是一周前吧，我终于把博客从jekyll又转到了hexo上，之前改写的hexo主题相比起jekyll主题已经太老了，所以这次也是直接又从jekyll主题中找到源文件来修改的，同时也将文章列表页重新改为列表，因为之前的标签会导致标题显示不全。<a id="more"></a></p><p>这次还把评论换成了友言，因为disqus真正被墙了，嘤嘤嘤。多说看起来总是很丑，而畅言一定要备案，所以最后还是换成了友言。</p><p>这个暑假自从升级了windows10红石以后，就一直想在bash里安装ruby环境并配置jekyll，这样就不用再打开虚拟机来处理博客了，然而apt-get得到的ruby默认版本是1.9，并不能使用jekyll，而后使用rvm来安装不知为何总是失败，后来也没再管，直到开学某一周突然想用hexo弄一个口琴谱的网站，使用了一个新的主题，突然发现hexo也支持scss的渲染，而不是我曾经以为一定要用的stylus，同时更加方便的配置和发布也让我有了使用hexo的想法，然后就直接开始撸主题。</p><p>上个学期本来定了一个计划想要每周都翻译一篇英语文章，到现在看来也不过只翻译了三篇，平时大部分时间都浪费在手机和游戏上。希望这学期能有所改观，虽说每周翻译一篇有点不太现实，但是每月翻译一篇我觉得还是能做到的。</p><p>那么，就这样吧。</p><h6 id="2016年10月4日"><a href="#2016年10月4日" class="headerlink" title="2016年10月4日"></a>2016年10月4日</h6>]]></content>
    
    
    <summary type="html">&lt;p&gt;大概就是一周前吧，我终于把博客从jekyll又转到了hexo上，之前改写的hexo主题相比起jekyll主题已经太老了，所以这次也是直接又从jekyll主题中找到源文件来修改的，同时也将文章列表页重新改为列表，因为之前的标签会导致标题显示不全。</summary>
    
    
    
    <category term="hexo" scheme="https://www.iwyvi.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://www.iwyvi.com/tags/hexo/"/>
    
    <category term="vizory" scheme="https://www.iwyvi.com/tags/vizory/"/>
    
  </entry>
  
  <entry>
    <title>【译】几乎要成为CSS的语言们</title>
    <link href="https://www.iwyvi.com/css/the-languages-which-almost-were-css/"/>
    <id>https://www.iwyvi.com/css/the-languages-which-almost-were-css/</id>
    <published>2016-10-04T03:35:58.000Z</published>
    <updated>2021-02-17T10:00:39.001Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://eager.io/blog/the-languages-which-almost-were-css/">The Languages Which Almost Became CSS</a></p><p>原文发布时间：06 Jul 2016</p><p>原作者：Zack Bloom / @<a href="https://twitter.com/zackbloom">zackbloom</a></p><p>翻译者：IwYvI</p></blockquote><blockquote><p>In fact, it has been a constant source of delight for me over the past year to get to continually tell hordes (literally) of people who want to – strap yourselves in, here it comes – control what their documents look like in ways that would be trivial in TeX, Microsoft Word, and every other common text processing environment: “Sorry, you’re <strong>screwed</strong>.”<br>— Marc Andreessen 1994</p></blockquote><p>当Tim Berners-Lee在1991年宣布HTML规范时，还没有设置页面样式的方法。对于那些给定的HTML标签，如何渲染它们是由浏览器决定的，同时也根据用户自定义的喜好来设置。这样看来，为页面制定一种标准来“建议”它在样式上应该被渲染成什么样是一个很好的想法。</p><p>但是CSS在5年里没有被引入，而10年里也没有被充分执行。在这段时间里页面样式的表示方法有许多创新和改革，涌现出很多种方法，而这些方法当时都很有机会演变成现在规范。</p><p>尽管这些语言显然在现在已经不用了，但我觉得想象世界本来有可能变成什么样还是很有趣的。同时令人惊奇的是，这些语言中许多特性却是如今开发者更想在CSS中看到的。</p><h3 id="第一项提议"><a href="#第一项提议" class="headerlink" title="第一项提议"></a>第一项提议</h3><p>在1993年初，Mosaic浏览器还没有发布1.0版本，而那时的各种浏览器也只能处理HTML。没有方法能标识HTML的样式，例如浏览器决定<code>&lt;h1&gt;</code>应该是什么样，那么你看到的就是什么样的。</p><p>在那年六月，Robert Raisch向www-talk mailing list提出了一项提议，要创建一种和Web文档一起发送、用于传播样式化信息并易于解析的格式化语言，这就是RRP。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@BODY</span> fo(fa=he,si=<span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>你应该原谅自己什么看不懂这段代码干了什么hhh。在gzip技术使用以前，同时那时的网络链接速度也徘徊在14.4k左右，把这种新格式的内容弄得尽可能短是很有必要的。上面这个规则是将字体（<code>fa</code>)设置为helvetica（<code>he</code>），将字体大小（<code>si</code>）设置为18points。</p><p>有趣的是在这个提议中没有提到任何单位，所有的数字都根据其上下文来解释（例如字体总是使用points）。因此RRP也被认为设计得更像一种渲染的”建议“而不是规则。这一点被认为很有必要，因为同样的样式表需要在命令行浏览器（如<a href="https://en.wikipedia.org/wiki/Lynx_(web_browser">Lynx</a>）和变得越来越流行的图形化浏览器上有着相同的效果。</p><p><img src="https://eager.io/blog/the-languages-which-almost-were-css/images/lynx.png"></p><p>RRP包含设定分栏布局的方法，而CSS却直到2011年才支持这项特性。例如设置一个三栏布局，每一栏”80 units“宽，可以这样写：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@P</span> co(nu=<span class="number">3</span>,wi=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>这分析起来有点难，但是大概不会比<code>white-space: nowrap</code>更坏。（我没看懂这句话）</p><p>值得注意的是RRP不支持我们今天使用的样式表中的“级联”。一个给定的document在同一时间只能有一个激活的样式表，这就需要逻辑方法来思考如何设置样式，虽然如今我们对此已经很陌生了。</p><p>Marc Andreessen（Mosaic的创造者）知道了RRP提议，但是却从没有在Mosaic浏览器中实现。取代而之的是Mosaic浏览器很快地（某种意义上是悲剧地）采用HTML标签来定义样式，引入了像<code>&lt;FONT&gt;</code>和<code>&lt;CENTER&gt;</code>这样的标签。</p><h3 id="Viola和早期浏览器之争"><a href="#Viola和早期浏览器之争" class="headerlink" title="Viola和早期浏览器之争"></a>Viola和早期浏览器之争</h3><blockquote><blockquote><p>Then why don’t you just implement one of the many style sheet proposals that are on the table. This would pretty much solve the problem if done correctly.</p></blockquote><p>So then I get to tell people, “Well, you get to learn this language to write your document, and then you get to learn that language for actually making your document look like you want it to.” Oh, they’ll love that.</p><p>— Marc Andreessen 1994</p></blockquote><p>与流行观点相反，Mosaic并不是第一个图形化浏览器。<a href="https://en.wikipedia.org/wiki/ViolaWWW">ViolaWWW</a>的诞生就在它之前，这一个Pei-Yuan仅仅用了四天写出来的图形化浏览器。</p><p><img src="https://eager.io/blog/the-languages-which-almost-were-css/images/viola.png"></p><p>Pei-Yuan创建了一种样式表语言，它支持一种我们现在在CSS中使用的嵌套结构。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(BODY fontSize=normal</span><br><span class="line">      BGColor=white</span><br><span class="line">      FGColor=black</span><br><span class="line">  (H1   fontSize=largest</span><br><span class="line">        BGColor=red</span><br><span class="line">        FGColor=white)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这种情况下我们对body应用了颜色设置，还专门对body里的<code>H1</code>元素设置了样式。为了取代使用重复的选择器来处理嵌套，PWP使用了圆括号系统，而这种系统在后来演化成缩进系统，例如如今一些开发者喜欢使用的Stylus和SASS便使用了这样的设计。这也使得PWP的语法在至少一个方面上潜在地比最终成为web通用语的CSS更加优秀。</p><p>PWP也需要以我们还在使用的方式来显著引入外部样式表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LINK</span> <span class="attr">REL</span>=<span class="string">&quot;STYLE&quot;</span> <span class="attr">HREF</span>=<span class="string">&quot;URL_to_a_stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ViolaWWW不幸地被主要用在<a href="https://en.wikipedia.org/wiki/X_Window_System">X Windowing System</a>上，仅仅在Unix操作系统中比较流行。当Mosaic发布Windows版本后，就很快就把Viola远远甩在后面。</p><h3 id="在Web之前的样式表"><a href="#在Web之前的样式表" class="headerlink" title="在Web之前的样式表"></a>在Web之前的样式表</h3><blockquote><p>HTML is the kind of thing that can only be loved by a computer scientist. Yes, it expresses the underlying structure of a document, but documents are more than just structured text databases; they have visual impact. HTML totally eliminates any visual creativity that a document’s designer might have.</p><p>— Roy Smith 1993</p></blockquote><p>早在互联网之前就有对文档样式化语言的需求。</p><p>你也许知道的，HTML最初是基于SGML这个互联网之前就存在的语言。1987年，美国国防部决定研究SGML能否存储和传输大量文档信息。像其他优秀的政府项目一样，他们没有在起名上浪费时间。他们最初叫Comuter-Aided Logistics Support Team，然后叫Computer-aided Acquisition and Logistics Support team，最终起名为Continuous Acquisition and Life-cycle Support initiative。无论怎样，首字母缩写为CALS。</p><p>CALS团队创建了一种用于样式化SGML文档的语言，叫做FOSI，毫无疑问这也是四个单词组合的首字母缩写。他们发表了全面的语言规范，因为语言不可理解。它还包含了一张我最喜欢的互联网上的无意义信息表<a href="http://people.opera.com/howcome/2006/phd/i/fosi.png">nonsensical infographics</a>。</p><p>互联网的一个不可侵犯规则是：如果你能证明其他人在某件事中错误了，更多的事将会完成（more will always get done if you can prove someone wrong in the process）（什么辣鸡翻译）。1993年，在Pei-Yuan的提议提出的四天后，Steven Heaney提出了不必“再造轮子”，最好是用FOSI的一种变体来样式化页面。</p><p>FOSI文档也是由SGML写成，这确实在某种程度上对于熟悉SGML变体HTML的前端开发人员是一种符合逻辑的选择。下面是一个文档的例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">outspec</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">docdesc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">charlist</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;12pt&quot;</span> <span class="attr">bckcol</span>=<span class="string">&quot;white&quot;</span> <span class="attr">fontcol</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">charlist</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">docdesc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">e-i-c</span> <span class="attr">gi</span>=<span class="string">&quot;h1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;24pt&quot;</span> <span class="attr">bckcol</span>=<span class="string">&quot;red&quot;</span>, <span class="attr">fontcol</span>=<span class="string">&quot;white&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">e-i-c</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">e-i-c</span> <span class="attr">gi</span>=<span class="string">&quot;h2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;20pt&quot;</span> <span class="attr">bckcol</span>=<span class="string">&quot;red&quot;</span>, <span class="attr">fgcol</span>=<span class="string">&quot;white&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">e-i-c</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">e-i-c</span> <span class="attr">gi</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">fgcol</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">e-i-c</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">e-i-c</span> <span class="attr">gi</span>=<span class="string">&quot;cmd kbd screen listing example&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">style</span>=<span class="string">&quot;monoser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">e-i-c</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">outspec</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你或许对<code>docdesc</code>或<code>charlist</code>是什么有点困惑，<code>www-talk</code>的成员也是这样。唯一与上下文有联系的信息是<code>e-i-c</code>，它代表“element in context”。然而值得注意的是FOSI引入了<code>em</code>这个单位，它在如今也成了那些对CSS了解比较深入的人更喜欢使用的单位。</p><p>语言冲突和编程一样古老。这是函数式“lisp-style”语法和声明式语言的战争。Pei-Yuan认为他的语法是类LISP式的，但是对于真正的LISP变体的出现也只是时间问题。</p><h3 id="图灵完备的样式表"><a href="#图灵完备的样式表" class="headerlink" title="图灵完备的样式表"></a>图灵完备的样式表</h3><p>由于FOSI很复杂，它也被认为是一个样式化的临时解决方案。更长远的计划是创建一种基于函数的编程语言体系，它可以提供你能想象到的文档转换。这种语言就是DSSSL。他的贡献者（contributor）这样说：</p><blockquote><p>It’s a mistake to put DSSSL into the same bag as scripting languages. Yes, DSSSL is Turing-complete; yes, it’s a programming language. But a script language (at least the way I use the term) is procedural; DSSSL very definitely is not. DSSSL is entirely functional and entirely side-effect-free. Nothing ever happens in a DSSSL stylesheet. The stylesheet is one giant function whose value is an abstract, device-independent, nonprocedural description of the formatted document that gets fed as a specification (a declaration, if you will) of display areas to downstream rendering processes.</p></blockquote><p>简单来说，DSSSL是一个相当合理的样式化语言：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(element H1</span><br><span class="line">  (make paragraph</span><br><span class="line">    font-size: <span class="number">14pt</span></span><br><span class="line">    font-weight: &#x27;bold))</span><br></pre></td></tr></table></figure><p>因为他是一个编程语言，所以你甚至可以定义函数：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(define (create-heading heading-font-size)</span><br><span class="line">  (make paragraph</span><br><span class="line">    font-size: heading-font-size</span><br><span class="line">    font-weight: &#x27;bold))</span><br><span class="line"></span><br><span class="line">(element h1 (create-heading <span class="number">24pt</span>))</span><br><span class="line">(element h2 (create-heading <span class="number">18pt</span>))</span><br></pre></td></tr></table></figure><p>同时可以使用数学结构，例如为表格各行上色。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(element TR</span><br><span class="line">  (if (= (modulo (child-number) 2)</span><br><span class="line">        0)</span><br><span class="line">    ...   ;even-row</span><br><span class="line">    ...)) ;odd-row</span><br></pre></td></tr></table></figure><p>更让人嫉妒的是，DSSSL可以继承变量的值并且进行数学运算：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(element H1</span><br><span class="line">  (make paragraph</span><br><span class="line">    font-size: (+ <span class="number">4pt</span> (inherited-font-size))))</span><br></pre></td></tr></table></figure><p>不幸的是，DSSSL有影响到所有完备体系语言的致命缺点：它又太多圆括号了。此外，当它发布的时候，它可以说是一个<em>太过完备</em>的规范，威胁到了其他浏览器开发者。DSSSL规范包含超过210项单独的样式化属性。</p><p>这个团队继续创造了文档转换语言<a href="https://en.wikipedia.org/wiki/XSL">XSL</a>，尽管这个语言并没有让人更容易理解，但是毫无疑问它却更受欢迎。</p><h3 id="为什么样式表最终胜出了"><a href="#为什么样式表最终胜出了" class="headerlink" title="为什么样式表最终胜出了"></a>为什么样式表最终胜出了</h3><p>CSS不包含父元素选择器（一种基于子元素来选择父元素的方法）。尽管在Stack Overflow上有许多人都在哀叹这个事实，然而他们却也为没有父元素选择器找出了许多原因。尤其是在互联网发展的早期，页面在document完全加载前就要开始渲染被认为是十分重要的事。换句话说，我们希望能HTML从一开始就被渲染，而不是还要等到完整下载以后才进行渲染。</p><p>父元素选择器意味着当HTML文档加载后样式会被更新。像DSSSL这样的语言就完全出局了，因为他们对HTML文档本身有一定的操作运算，而这有可能无法在渲染开始的时候就执行。</p><p>在1995年三月，Bert Bos 第一个提出这个问题并且提议出了一个可行的语言方案。同时他的建议还包含了“笑脸”表情的早期版本。:-)</p><p>这个语言在语法上有点“面向对象”的感觉：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-tag">LI</span><span class="selector-class">.prebreak</span>: <span class="number">0.5</span></span><br><span class="line">*LI.postbreak: <span class="number">0.5</span></span><br><span class="line">*OL.LI.label: <span class="number">1</span></span><br><span class="line">*OL*OL.LI.label: A</span><br></pre></td></tr></table></figure><p>使用<code>.</code>表示直接子元素，使用<code>*</code>来指定祖先元素</p><p>这种语言还定义了在样式表中怎样创建链接：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-tag">A</span><span class="selector-class">.anchor</span>: !HREF</span><br></pre></td></tr></table></figure><p>这种情况下，我们指定了元素的连接就是它的<code>HREF</code>属性的值。在当时，像链接这样可以控制元素行为的提议十分很流行。在JavaScript出现之前，还没有办法来做到这件事，所以它似乎顺理成章的在这些提议中出现。</p><p>又在1994年，一个名叫”C.M. Sperberg-McQueen”的人提出了一种函数形式的语言：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">style</span> a</span><br><span class="line">  (<span class="name">block</span> <span class="literal">#f</span>)     <span class="comment">; format as inline phrase</span></span><br><span class="line">  (<span class="name">color</span> blue)   <span class="comment">; in blue if you’ve got it</span></span><br><span class="line">  (<span class="name">click</span> (<span class="name">follow</span> (<span class="name">attval</span> <span class="symbol">&#x27;href</span>)))  <span class="comment">; and on click, follow url</span></span><br></pre></td></tr></table></figure><p>他的语言使用了<code>content</code>作为样式表控制HTML元素内容的关键词，在之后CSS2.1中也引入了这个概念。</p><h3 id="本应该发生什么"><a href="#本应该发生什么" class="headerlink" title="本应该发生什么"></a>本应该发生什么</h3><p>在我讨论最终演变为CSS的语言之前，我还要提一下另外一门语言的提议，只是因为它在某种程度上实现了早期web开发者的梦想。</p><p>PSL96得名于1996版“规范表述语言”（Presentation Specification Language）。PSL看起来很像CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">H1</span> &#123;</span><br><span class="line">  fontSize: <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然它很快变得有趣起来。例如，当你声明元素位置的时候，你不仅可以基于已经指定的尺寸（<code>Width</code>），还可以基于浏览器渲染后的实际尺寸（<code>Actual Width</code>）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">LI</span> &#123;</span><br><span class="line">  VertPos: Top = LeftSib . Actual Bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时你还可以使用左边的兄弟元素作为其约束。</p><p>或者在样式中添加逻辑表达式。例如对一个有<code>hrefs</code>的元素进行样式化：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">A</span> &#123;</span><br><span class="line">  if (getAttribute(self, &quot;href&quot;) != &quot;&quot;) then</span><br><span class="line">    fgColor = &quot;blue&quot;;</span><br><span class="line">    underlineNumber = 1;</span><br><span class="line">  endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>这种样式语言可以被拓展到完成所有我们求助于class去完成的方法</del></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">LI</span> &#123;</span><br><span class="line">  if (ChildNum(Self) == round(NumChildren(Parent) / 2 + 1)) then</span><br><span class="line">    VertPos: Top = Parent.Top;</span><br><span class="line">    HorizPos: Left = LeftSib.Left + Self.Width;</span><br><span class="line">  else</span><br><span class="line">    VertPos: Top = LeftSib.Actual Bottom;</span><br><span class="line">    HorizPos: Left = LeftSib.Left;</span><br><span class="line">  endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语言对函数化的支持真正有机会让从样式中分离内容的梦想实现。然而不幸的是，由于这门语言由于具有太高的扩展性，在各种浏览器上的实现也会有很大不同。此外，它也仅仅被发表在学术界的一系列论文上面，而没有在www-talk邮件列表上出现，即它从来没有在任何主流浏览器中被实现。</p><h3 id="昔日的CSS"><a href="#昔日的CSS" class="headerlink" title="昔日的CSS"></a>昔日的CSS</h3><p>1994年由 Håkon W Lie <a href="http://people.opera.com/howcome/2006/phd/archive/www.w3.org/People/howcome/p/cascade.html">提出</a>的名为CHSS（Cascading HTML Style Sheets）的语言，就是某种程度上直接成为CSS的语言。</p><p>好的想法最初似乎都有些奇葩。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1.font.size = 24pt 100%</span><br><span class="line">h2.font.size = 20pt 40%</span><br></pre></td></tr></table></figure><p>每个规则后面都跟有一个比例。这个比例代表了当前样式表在这个样式规则上的所有权的多少。例如，如果之前一个样式表已经定义了<code>h2</code>的字体大小为<code>30pt</code>，比例为<code>60%</code>，现在的样式表又定义<code>h2</code>标签的样式为<code>20px 40%</code>，那么两个值则会根据其所有权比例组合计算，最终为<code>26pt</code>（<code>30*0.6+20*0.4</code>）。</p><p>在页面基于HTML文档的时代，因为没有相对折中的设计能很好的工作，这种提议的出现也就显得很容易理解了。然而，它确实包含了样式表可以层叠这一基本的想法。换句话说，它本支持多个样式表应用在同一个页面上。</p><p>它最初的构想普遍被认为是十分重要的，因为它给了终端用户在他们所看见的基础上操作样式的能力。原始页面有一个样式表，然后网页用户也有他们自己的样式表，然后两者联合渲染出页面。支持多样式表被认为是保护了网络上的个人自由，而不是支持开发者（仍然手写单独页面的那些人）。</p><p>用户甚至能控制页面作者的建议样式有多大的“权限”，建议中用下面这样的ASCII图来表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       User                   Author</span><br><span class="line">Font   o-----x--------------o 64%</span><br><span class="line">Color  o-x------------------o 90%</span><br><span class="line">Margin o-------------x------o 37%</span><br><span class="line">Volume o---------x----------o 50%</span><br></pre></td></tr></table></figure><p>像这样的建议一样，这门语言里还包含了许多在几十年中都不会在CSS里实现的特性。例如，它允许写基于用户环境的逻辑表达式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AGE &gt; 3d ? background.color = pale_yellow : background.color = white</span><br><span class="line">DISPLAY_HEIGHT &gt; 30cm ? http://NYT.com/style : http://LeMonde.fr/style</span><br></pre></td></tr></table></figure><p>在某种乐观的科幻想象里，浏览器可以判断页面中那一块内容是你想要的，并且把它放大来展示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RELEVANCE &gt; 80 ? h1.font.size *= 1.5</span><br></pre></td></tr></table></figure><h3 id="你知道下面将会发生什么"><a href="#你知道下面将会发生什么" class="headerlink" title="你知道下面将会发生什么"></a>你知道下面将会发生什么</h3><blockquote><p>Microsoft is absolutely committed to open standards, especially on the Internet.</p><p>— John Ludeman 1994</p></blockquote><p>Håkon Lie继续精简他的提议，并且和Bert Bos一起在1996年12月发布了CSS规范的第一个版本。最终他把CSS的诞生写成了博士论文，这也是帮助我现在写这篇文章的一个重要的文档。</p><p>相比于其他提议来说，CSS一个很重要的特点就是它的简洁性。它可以被轻松地分析，书写和阅读。正如在互联网发展史上许多其他方面的例子一样，对于新手更简单友好的技术比起那些在专家手中更加强大的技术来说，更加能在发展中胜出。</p><p>它本身对大多数新技术革新存在的偶然性就是一种提醒。例如，支持上下文选择器（<code>body ol li</code>）特性的添加是因为网景（Netscape）浏览器已经有一个移除超链接图片边框的方法。同时实现当时流行浏览器所有的功能看起来也是很有必要的。然而这个功能本身也对CSS的实现增加了难度，因为在当时绝大多数浏览器都没有在解析HTML的时候维持一个标签“堆”。这也意味着想要完整支持CSS，解析器就要被重新设计。</p><p>像这样的挑战（还有被广泛使用的非标准HTML表情定义样式的方案）导致直到1997年CSS都无法使用，而直到2000年3月才有独立浏览器支持了CSS的完整功能。然而任何一个开发者都会告诉你，浏览器对CSS的支持并不是所有地方都和官方标准一致，大约在CSS发行15年后，这种情况才有所改变。</p><h3 id="最终的挑战"><a href="#最终的挑战" class="headerlink" title="最终的挑战"></a>最终的挑战</h3><blockquote><p>If Netscape 4 ignored CSS rules applied to the <code>&lt;body&gt;</code> element and added random amounts of whitespace to every structural element on your page, and if IE4 got <code>&lt;body&gt;</code> right but bungled padding, what kind of CSS was safe to write? Some developers chose not to write CSS at all. Others wrote one style sheet to compensate for IE4’s flaws and a different style sheet to compensate for the blunders of Netscape 4.</p><p>— Jeffrey Zeldman</p></blockquote><p>IE3著名的就是支持了CSS（虽然某种意义上很可怕）。为了与之竞争，Netscape4也对CSS有了支持。然而Netscape没有重点押注到这第三种语言上（相对于HTML和JavaScript），而是决定实现一种将CSS转换为JavaScript的技术。更进一步，它们设计的这种”JavaScript Style Sheet”中间语言允许被web开发者访问到。</p><p>它的语法就是JavaScript，同时附加了一些指定样式的API：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tags.H1.color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">tags.p.fontSize = <span class="string">&quot;14pt&quot;</span>;</span><br><span class="line"><span class="keyword">with</span> (tags.H3) &#123;</span><br><span class="line">  color = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">classes.punk.all.color = <span class="string">&quot;#00FF00&quot;</span></span><br><span class="line">ids.z098y.letterSpacing = <span class="string">&quot;0.3em&quot;</span></span><br></pre></td></tr></table></figure><p>你甚至可以定义函数来计算tag不同状态下的样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">evaluate_style</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (color == <span class="string">&quot;red&quot;</span>)&#123;</span><br><span class="line">    fontStyle = <span class="string">&quot;italic&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fontWeight = <span class="string">&quot;bold&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tag.UL.apply = evaluate_style();</span><br></pre></td></tr></table></figure><p>我们想弱化样式和脚本之间的分界线是有道理的，而如今在<a href="https://facebook.github.io/react/tips/inline-styles.html">React社区</a>这种现象甚至再次出现。</p><p>JavaScript在当时还是一个十分新的语言，但是通过一些逆向工程，IE已经在IE3增加了对它的支持（叫做“JScript”）。更大的问题是社区已经重新围绕CSS来研究，而网景在当时则被主流社区认为是一个<a href="https://lists.w3.org/Archives/Public/www-style/1996Jun/0068.html">恶霸</a>。网景向标准委员会<a href="https://www.w3.org/Submission/1996/1/WD-jsss-960822">提交</a>了JSSS提议，但最终该提议被置若罔闻。三年以后，Netscape6取消了对JSSS的支持，JSSS也很快消亡了。</p><h3 id="本来可能会发生什么"><a href="#本来可能会发生什么" class="headerlink" title="本来可能会发生什么"></a>本来可能会发生什么</h3><p>由于W3C的一些公开羞辱，IE5.5终于在2000年发行时提供了对完整CSS1的支持。当然正如我们所知，浏览器CSS的实现还有许多bug并且难以使用长达十年之久。如今这些问题已经幸运地改善了，让许多开发者也实现了编写一次代码，在各个浏览器上都有几乎相同的效果的梦想。</p><p>从以上内容中我认识到了那些有可能控制我们现在使用的工具的许多决定。如果当时CSS的设计只是为了满足1996年的限制，那么这一切对于20年后的我们将有所不同。</p><blockquote><p>原文链接：<a href="https://eager.io/blog/the-languages-which-almost-were-css/">The Languages Which Almost Became CSS</a></p><p>原文发布时间：06 Jul 2016</p><p>原作者：Zack Bloom / @<a href="https://twitter.com/zackbloom">zackbloom</a></p><p>翻译者：IwYvI</p><p>翻译时间：2016/10/4</p><p>这篇文章从七月初就开始翻译了，然后各种拖，到现在也才基本翻译完，里面还有很多地方感觉语句不是很通顺，也带有很强的翻译腔。嘤嘤嘤</p></blockquote>]]></content>
    
    
    <summary type="html">【翻译】《The Languages Which Almost Became CSS》：在CSS出现之前，还有许多种样式语言来定义HTML标签的样式，本文就将介绍这些语言的历史。（这个介绍我实在是编不动了）</summary>
    
    
    
    <category term="css" scheme="https://www.iwyvi.com/categories/css/"/>
    
    
    <category term="前端" scheme="https://www.iwyvi.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="css" scheme="https://www.iwyvi.com/tags/css/"/>
    
    <category term="翻译" scheme="https://www.iwyvi.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>我的gh60客制化键盘</title>
    <link href="https://www.iwyvi.com/keyboard/gh60-keyboard/"/>
    <id>https://www.iwyvi.com/keyboard/gh60-keyboard/</id>
    <published>2016-07-07T07:42:58.000Z</published>
    <updated>2021-02-17T10:00:38.999Z</updated>
    
    <content type="html"><![CDATA[<p>我的第一个客制化gh60机械键盘，使用了无钢板g轴红轴，同时刷了自己喜欢的配列。</p><p>之前的那个贼鸥87键的机械键盘坏了，有一个键一直触发，但是按键的时候却不触发了，不知道是不是因为pcb某处短路。然后前一段时间一直想换一个新的键盘，然后由于预算各种纠结，当然也学习到了许多新的东西。<a id="more"></a></p><p>最开始想直接买把薄膜键盘算了，然后还是觉得薄膜存在手感问题。而后又看了人体工学键盘，然而机械的人体工学键盘贵的简直不忍直视。微软的Sculpt键盘看起来好漂亮但是迫于预算也只能看一看，微软3000似乎已经是很多年前的型号了，但是还是很贵，这个价格可以买一个机械键盘了。所以当时也在考虑微软2000。后来根据网上评论说这个键盘手感并不好，我又不是特别想买薄膜键盘，所以又想起了曾经看到的客制化。</p><p>然后就接触了一种神奇的60%键盘，这种连f区都被阉割的布局。客制化的键盘主要是gh60，然后网上查到可用通过刷固件改变键盘配列。反正忘了具体为什么下决心买了一套，虽然当时对自己的焊工没有信心。</p><p>上面说了一堆我自己都不会说的废话。</p><p><img src="https://i.loli.net/2018/09/08/5b935d7f74347.jpg"></p><p>这是拆包后的材料，加了一个奇怪的电影滤镜</p><p>然后开始装卫星轴、测试、装轴、刷配列、装键帽、焊轴、拆键帽、装灯、上壳、装键帽（这个顺序是我的顺序，刷配列可以放在最后）。</p><blockquote><p>这里给几个我参考的教程：</p><p><a href="http://forum.eepw.com.cn/forum/thread/threadid/277251/flag/1">tangdyy的GH60组装过程(修改多层按键配列)</a></p><p><a href="http://forum.eepw.com.cn/thread/277379/1?spm=0.0.0.0.AyAuOv">【KB230】archlich的GH60进程</a></p><p><a href="http://forum.eepw.com.cn/thread/278667/1">Simmo 的GH60进程</a></p><p><a href="http://bbs.wstx.com/thread-632487-1-1.html">【白杨】satan版GH 60组有钢茶 POKER配列详细教程</a></p></blockquote><p><img src="https://i.loli.net/2018/09/08/5b935da3ec3ac.jpg"></p><p>这个是焊完轴插上灯以后的照片</p><p><del>成品图明天再放因为键帽还没到</del></p><p>这是成品图</p><p><img src="https://i.loli.net/2018/09/08/5b935dc538db4.jpg"></p><p><img src="https://i.loli.net/2018/09/08/5b935dda69d77.jpg"></p><h3 id="配列"><a href="#配列" class="headerlink" title="配列"></a>配列</h3><p>设计配列：<a href="http://www.keyboard-layout-editor.com/">keyboard-layout-editor</a></p><p>生成固件：<a href="http://tkg.io/">TMK Keymap Generator</a></p><p>我的板子就是淘宝上satan的gh60板子，默认是poker配列，首先我想刷成pure配列，然后加上自己喜欢的功能。上面两个网站里第一个是设计配列的网站，按键内容是在第二个网站帮助里，可以实现所有帮助有的按键效果。</p><p>我一共有5层</p><p>第0层是默认层，基本上是标准键盘，右下角的几个键改成了方向键，大小写锁定键改成了fn，esc作为trick esc（正常按下是esc，shift+esc按下是~）</p><p><img src="https://i.loli.net/2018/09/08/5b935df2b1735.jpg"></p><p>第一层是dvorak布局层</p><p><img src="https://i.loli.net/2018/09/08/5b935e0c5aafb.jpg"></p><p>第二层将数字键变成f区</p><p><img src="https://i.loli.net/2018/09/08/5b935e1f56014.jpg"></p><p>第三层是小键盘层</p><p><img src="https://i.loli.net/2018/09/08/5b935e30c26ce.jpg"></p><p>第四层是fn0按下瞬间弹出来的层，主要放了大量的功能，wasd附近按键控制鼠标操作，tab当作大小写锁定，cvb控制背光，右边是媒体键和功能键。fn5切换第一层，fn6切换第二层，fn6切换第三层。</p><p><img src="https://i.loli.net/2018/09/08/5b935e443facf.jpg"></p><p>注意，高层会将低层内容覆盖。</p><p>将每一层的raw data复制到第二个网站里，satan的板子选择GH60(RevCHN)</p><p><img src="https://i.loli.net/2018/09/08/5b935e56145f9.jpg"></p><p>这里是fn和灯的设置</p><p><img src="https://i.loli.net/2018/09/08/5b935e63e86e5.jpg"></p><p>这里让大小写锁定灯和背光保持一致，原本我以为把大小写放在别的层上面只有切换到那一层才显示为大小写灯，没想到这个灯强制为标准的大小写键位灯。</p><p>下面是我的各层的代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//-------------layer0-----------</span><br><span class="line">[&quot;Fn4&quot;,&quot;!\n1&quot;,&quot;@\n2&quot;,&quot;#\n3&quot;,&quot;$\n4&quot;,&quot;%\n5&quot;,&quot;^\n6&quot;,&quot;&amp;\n7&quot;,&quot;*\n8&quot;,&quot;(\n9&quot;,&quot;)\n0&quot;,&quot;_\n-&quot;,&quot;+\n=&quot;,&#123;w:2&#125;,&quot;Backspace&quot;],</span><br><span class="line">[&#123;w:1.5&#125;,&quot;Tab&quot;,&quot;Q&quot;,&quot;W&quot;,&quot;E&quot;,&quot;R&quot;,&quot;T&quot;,&quot;Y&quot;,&quot;U&quot;,&quot;I&quot;,&quot;O&quot;,&quot;P&quot;,&quot;&#123;\n[&quot;,&quot;&#125;\n]&quot;,&#123;w:1.5&#125;,&quot;|\n\\&quot;],</span><br><span class="line">[&#123;w:1.75&#125;,&quot;fn0&quot;,&quot;A&quot;,&quot;S&quot;,&quot;D&quot;,&quot;F&quot;,&quot;G&quot;,&quot;H&quot;,&quot;J&quot;,&quot;K&quot;,&quot;L&quot;,&quot;:\n;&quot;,&quot;\&quot;\n&#x27;&quot;,&#123;w:2.25&#125;,&quot;Enter&quot;],</span><br><span class="line">[&#123;w:2.25&#125;,&quot;Shift&quot;,&quot;Z&quot;,&quot;X&quot;,&quot;C&quot;,&quot;V&quot;,&quot;B&quot;,&quot;N&quot;,&quot;M&quot;,&quot;&lt;\n,&quot;,&quot;&gt;\n.&quot;,&quot;?\n/&quot;,&#123;w:1.75&#125;,&quot;↑&quot;,&quot;Del&quot;],</span><br><span class="line">[&#123;w:1.25&#125;,&quot;Ctrl&quot;,&#123;w:1.25&#125;,&quot;Win&quot;,&#123;w:1.25&#125;,&quot;Alt&quot;,&#123;w:6.25&#125;,&quot;space&quot;,&#123;w:1.25&#125;,&quot;Fn0&quot;,&#123;w:1.25&#125;,&quot;←&quot;,&#123;w:1.25&#125;,&quot;↓&quot;,&#123;w:1.25&#125;,&quot;→&quot;]</span><br><span class="line"></span><br><span class="line">//-------------layer1-----------</span><br><span class="line">[&#123;a:7&#125;,&quot;&quot;,&#123;a:4&#125;,&quot;!\n1&quot;,&quot;@\n2&quot;,&quot;#\n3&quot;,&quot;$\n4&quot;,&quot;%\n5&quot;,&quot;^\n6&quot;,&quot;&amp;\n7&quot;,&quot;*\n8&quot;,&quot;(\n9&quot;,&quot;)\n0&quot;,&quot;&#123;\n[&quot;,&quot;&#125;\n]&quot;,&#123;a:7,w:2&#125;,&quot;&quot;],</span><br><span class="line">[&#123;w:1.5&#125;,&quot;&quot;,&#123;a:4&#125;,&quot;\&quot;\n&#x27;&quot;,&quot;&lt;\n,&quot;,&quot;&gt;\n.&quot;,&quot;P&quot;,&quot;Y&quot;,&quot;F&quot;,&quot;G&quot;,&quot;C&quot;,&quot;R&quot;,&quot;L&quot;,&quot;?\n/&quot;,&quot;+\n=&quot;,&#123;a:7,w:1.5&#125;,&quot;&quot;],</span><br><span class="line">[&#123;w:1.75&#125;,&quot;&quot;,&#123;a:4&#125;,&quot;A&quot;,&quot;O&quot;,&quot;E&quot;,&quot;U&quot;,&quot;I&quot;,&quot;D&quot;,&quot;H&quot;,&quot;T&quot;,&quot;N&quot;,&quot;S&quot;,&quot;_\n-&quot;,&#123;a:7,w:2.25&#125;,&quot;&quot;],</span><br><span class="line">[&#123;w:2.25&#125;,&quot;&quot;,&#123;a:4&#125;,&quot;:\n;&quot;,&quot;Q&quot;,&quot;J&quot;,&quot;K&quot;,&quot;X&quot;,&quot;B&quot;,&quot;M&quot;,&quot;W&quot;,&quot;V&quot;,&quot;Z&quot;,&#123;a:7,w:1.75&#125;,&quot;&quot;,&quot;&quot;],</span><br><span class="line">[&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:6.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;]</span><br><span class="line"></span><br><span class="line">//-------------layer2-----------</span><br><span class="line">[&#123;a:7&#125;,&quot;&quot;,&#123;a:4&#125;,&quot;F1&quot;,&quot;F2&quot;,&quot;F3&quot;,&quot;F4&quot;,&quot;F5&quot;,&quot;F6&quot;,&quot;F7&quot;,&quot;F8&quot;,&quot;F9&quot;,&quot;F10&quot;,&quot;F11&quot;,&quot;F12&quot;,&#123;a:7,w:2&#125;,&quot;&quot;],</span><br><span class="line">[&#123;w:1.5&#125;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&#123;w:1.5&#125;,&quot;&quot;],</span><br><span class="line">[&#123;w:1.75&#125;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&#123;w:2.25&#125;,&quot;&quot;],</span><br><span class="line">[&#123;w:2.25&#125;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&#123;w:1.75&#125;,&quot;&quot;,&quot;&quot;],</span><br><span class="line">[&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:6.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;]</span><br><span class="line"></span><br><span class="line">//-------------layer3-----------</span><br><span class="line">[&#123;a:7&#125;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&#123;a:4&#125;,&quot;numlock&quot;,&quot;7\nhome&quot;,&quot;8\nup&quot;,&quot;9\npgup&quot;,&quot;/&quot;,&#123;a:7&#125;,&quot;&quot;,&quot;&quot;,&#123;w:2&#125;,&quot;&quot;],</span><br><span class="line">[&#123;w:1.5&#125;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&#123;a:4&#125;,&quot;4\nleft&quot;,&quot;5&quot;,&quot;6\nright&quot;,&quot;*&quot;,&#123;a:7&#125;,&quot;&quot;,&quot;&quot;,&#123;w:1.5&#125;,&quot;&quot;],</span><br><span class="line">[&#123;w:1.75&#125;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&#123;a:4&#125;,&quot;1\nend&quot;,&quot;2\ndown&quot;,&quot;3\npgdn&quot;,&quot;-&quot;,&#123;a:7&#125;,&quot;&quot;,&#123;a:4,w:2.25&#125;,&quot;penter&quot;],</span><br><span class="line">[&#123;a:7,w:2.25&#125;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&#123;a:4&#125;,&quot;0\nins&quot;,&quot;.\ndel&quot;,&quot;+&quot;,&quot;+&quot;,&#123;a:7,w:1.75&#125;,&quot;&quot;,&quot;&quot;],</span><br><span class="line">[&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:6.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;]</span><br><span class="line"></span><br><span class="line">//-------------layer4-----------</span><br><span class="line">[&quot;~\n`&quot;,&quot;F1&quot;,&quot;F2&quot;,&quot;F3&quot;,&quot;F4&quot;,&quot;F5&quot;,&quot;F6&quot;,&quot;F7&quot;,&quot;F8&quot;,&quot;F9&quot;,&quot;F10&quot;,&quot;F11&quot;,&quot;F12&quot;,&#123;w:2&#125;,&quot;fn6&quot;],</span><br><span class="line">[&#123;w:1.5&#125;,&quot;capslock&quot;,&quot;button1&quot;,&quot;mouseup&quot;,&quot;button2&quot;,&quot;wheelup&quot;,&quot;accel0&quot;,&#123;a:7&#125;,&quot;&quot;,&quot;&quot;,&#123;a:4&#125;,&quot;calc&quot;,&#123;a:7&#125;,&quot;&quot;,&#123;a:4&#125;,&quot;PSc&quot;,&quot;ScrLk&quot;,&quot;pause\nbreak&quot;,&#123;w:1.5&#125;,&quot;fn7&quot;],</span><br><span class="line">[&#123;a:7,w:1.75&#125;,&quot;&quot;,&#123;a:4&#125;,&quot;mouseleft&quot;,&quot;mousedown&quot;,&quot;mouseright&quot;,&quot;wheeldown&quot;,&quot;accel1&quot;,&#123;a:7&#125;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&#123;a:4&#125;,&quot;prevtrack&quot;,&quot;nexttrack&quot;,&#123;a:7,w:2.25&#125;,&quot;&quot;],</span><br><span class="line">[&#123;w:2.25&#125;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&#123;a:4&#125;,&quot;Fn2&quot;,&quot;Fn3&quot;,&quot;Fn1&quot;,&#123;a:7&#125;,&quot;&quot;,&#123;a:4&#125;,&quot;Mute&quot;,&quot;VolDn&quot;,&quot;VolUp&quot;,&quot;play&quot;,&#123;w:1.75&#125;,&quot;Home&quot;,&quot;PgUp&quot;],</span><br><span class="line">[&#123;a:7,w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;w:1.25&#125;,&quot;&quot;,&#123;a:4,w:6.25&#125;,&quot;Fn5&quot;,&#123;a:7,w:1.25&#125;,&quot;&quot;,&#123;a:4,w:1.25&#125;,&quot;Ins&quot;,&#123;w:1.25&#125;,&quot;End&quot;,&#123;w:1.25&#125;,&quot;PgDn&quot;]</span><br></pre></td></tr></table></figure><p>这个是fn设置</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;0&quot;:[&quot;ACTION_LAYER_MOMENTARY&quot;,&quot;4&quot;],&quot;1&quot;:[&quot;ACTION_BACKLIGHT_TOGGLE&quot;],&quot;2&quot;:[&quot;ACTION_BACKLIGHT_DECREASE&quot;],&quot;3&quot;:[&quot;ACTION_BACKLIGHT_INCREASE&quot;],&quot;4&quot;:[&quot;ACTION_FUNCTION&quot;,0,0],&quot;5&quot;:[&quot;ACTION_LAYER_TOGGLE&quot;,1],&quot;6&quot;:[&quot;ACTION_LAYER_TOGGLE&quot;,&quot;2&quot;],&quot;7&quot;:[&quot;ACTION_LAYER_TOGGLE&quot;,&quot;3&quot;]</span><br></pre></td></tr></table></figure><p>放心去刷适合自己的配列吧嘤嘤嘤</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我的第一个客制化gh60机械键盘，使用了无钢板g轴红轴，同时刷了自己喜欢的配列。&lt;/p&gt;
&lt;p&gt;之前的那个贼鸥87键的机械键盘坏了，有一个键一直触发，但是按键的时候却不触发了，不知道是不是因为pcb某处短路。然后前一段时间一直想换一个新的键盘，然后由于预算各种纠结，当然也学习到了许多新的东西。</summary>
    
    
    
    <category term="keyboard" scheme="https://www.iwyvi.com/categories/keyboard/"/>
    
    
    <category term="hardware" scheme="https://www.iwyvi.com/tags/hardware/"/>
    
    <category term="keyboard" scheme="https://www.iwyvi.com/tags/keyboard/"/>
    
    <category term="gh60" scheme="https://www.iwyvi.com/tags/gh60/"/>
    
  </entry>
  
  <entry>
    <title>【译】CSS @apply规则(mixins)</title>
    <link href="https://www.iwyvi.com/css/css-apply-rule/"/>
    <id>https://www.iwyvi.com/css/css-apply-rule/</id>
    <published>2016-04-22T09:25:58.000Z</published>
    <updated>2021-02-17T10:00:38.999Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://blog.gospodarets.com/css_apply_rule">CSS @apply rule (native CSS mixins)</a></p><p>原文发布时间：April 11, 2016</p><p>原作者：Serg Gospodarets</p><p>翻译者：IwYvI</p></blockquote><p>在我前一篇文章<a href="http://www.iwyvi.com/css/css-properties-in-depth">深入了解CSS自定义属性</a>中，我描述了CSS属性（变量）和它们各种不同的用法。</p><p>如果你读完之后打算开始从CSS预处理器转变成用纯CSS，你的下一个问题可能是这样：“mixins要怎么办？”</p><p>答案就是：我们现在不仅有一个编辑者草案（editor’s draft）：<a href="https://tabatkins.github.io/specs/css-apply-rule/">https://tabatkins.github.io/specs/css-apply-rule/</a></p><p>还在Chrome浏览器中实现了：<a href="https://www.chromestatus.com/feature/5753701012602880">https://www.chromestatus.com/feature/5753701012602880</a></p><p>在继续阅读之前，你最好已经理解了<a href="http://www.iwyvi.com/css/css-properties-in-depth">CSS自定义属性</a>和<a href="https://css-tricks.com/custom-user-mixins/">CSS mixins</a>的规则</p><h3 id="定义自定义集"><a href="#定义自定义集" class="headerlink" title="定义自定义集"></a>定义自定义集</h3><p>正如我们所知，你可以<a href="http://www.iwyvi.com/css/css-properties-in-depth#section-1">为一个自定义属性赋任意值</a></p><p>让我们先定义一个属性集</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  --pink-theme: &#123;</span><br><span class="line">    color: <span class="number">#6A8759</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F64778</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（然而目前我的CSS代码高亮在这个语法下好口怕所以我用了SCSS来代替）</p><p>它仍然是一个有效的CSS自定义属性，因为它还是包括在<code>&#123;&#125;</code>里的一系列CSS属性。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>为了区分<a href="http://www.iwyvi.com/css/css-properties-in-depth#section-2">CSS自定义属性的用法</a>和mixins，我们提出使用一个新的<a href="https://developer.mozilla.org/en/docs/Web/CSS/At-rule">@规则语句</a></p><p>你应该更熟悉这些：使用<code>@</code>开头并跟着一些关键词，以此作为CSS的一些功能标识符</p><p>例子：<code>@charset</code>，<code>@import</code>，<code>@keyframes</code>，<code>@media</code>和<a href="https://css-tricks.com/the-at-rules-of-css/">更多内容</a>。</p><p>下面我们再接触一个实现CSS mixins的新CSS语句：<code>@apply</code>。</p><p>让我们应用一下这些规则（原谅我罗罗嗦嗦说了这么多[表情]）：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="keyword">@apply</span> --pink-theme;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_yOXWdm" src="//codepen.io/malyw/embed/yOXWdm?height=150&amp;theme-id=178&amp;slug-hash=yOXWdm&amp;user=malyw&amp;default-tab=result" scrolling="no" frameborder="0" height="150" allowtransparency="true" allowfullscreen="true" name="CodePen Embed" title="CodePen Embed" class="cp_embed_iframe " style="width: 100%; overflow: hidden;"></iframe><p>上面我们轻松使用了我们的第一个CSS mixin，它看起来确实很像<a href="http://sass-lang.com/guide#topic-6">SCSS mixins</a>。</p><p>所以一般的语法是这样：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DEFINING</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    --custom-property-name: &#123;</span><br><span class="line">        prop-name: value;</span><br><span class="line">        <span class="comment">/*...*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// APPLYING</span></span><br><span class="line"><span class="keyword">@apply</span> custom-property-name;</span><br></pre></td></tr></table></figure><h3 id="Mixins的例子"><a href="#Mixins的例子" class="headerlink" title="Mixins的例子"></a>Mixins的例子</h3><p>通常情况项目中会用到许多mixins。如<a href="http://stackoverflow.com/questions/9543541/what-does-the-clearfix-class-do-in-css">清除浮动</a>，创建CSS三角形和其他内容。</p><p>让我们使用纯CSS来重写它们</p><h4 id="清除浮动（clearfix）-mixins"><a href="#清除浮动（clearfix）-mixins" class="headerlink" title="清除浮动（clearfix） mixins"></a>清除浮动（clearfix） mixins</h4><p>有<a href="https://github.com/twbs/bootstrap/blob/master/less/mixins/clearfix.less">很多</a>，<a href="https://gist.github.com/mrinalwadhwa/2934863">很多</a>，<a href="https://gist.github.com/jelmerdemaat/3804403">很多</a>关于清除浮动的实现，然而我们可以使用这个简单的方法：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DEFINE</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  --clearfix: &#123;</span><br><span class="line">    display: table;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// USE</span></span><br><span class="line"><span class="selector-class">.box</span>:after&#123;</span><br><span class="line">  @apply --clearfix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_grRNRQ" src="//codepen.io/malyw/embed/grRNRQ?height=150&amp;theme-id=178&amp;slug-hash=grRNRQ&amp;user=malyw&amp;default-tab=result" scrolling="no" frameborder="0" height="150" allowtransparency="true" allowfullscreen="true" name="CodePen Embed" title="CodePen Embed" class="cp_embed_iframe " style="width: 100%; overflow: hidden;"></iframe><p>如果你没有进行清除浮动，浏览器将合并红色背景</p><p>BTW，在现在Chrome浏览器的实现中有一个有趣的bug：在mixin之前如果没写有<code>.box:after&#123;content:&#39;SOME&#39;;</code>，在mixin中的<code>content</code>规则将会无效</p><h4 id="溢出省略号（overflow-ellipsis）-mixin"><a href="#溢出省略号（overflow-ellipsis）-mixin" class="headerlink" title="溢出省略号（overflow-ellipsis） mixin"></a>溢出省略号（overflow-ellipsis） mixin</h4><p>当你的UI界面要保证文字不会超出block，通常的解决方案（根据不同的需求）是使用<a href="https://developer.mozilla.org/en/docs/Web/CSS/text-overflow">text-overflow</a>规则。</p><p>但是<code>text-overflow: ellipsis;</code>在没有<code>overflow: hidden;</code>和<code>white-space: nowrap;</code>下并没有什么用。这正是mixin大展身手的地方！</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DEFINE</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  --mixin-<span class="attribute">overflow</span>-ellipsis: &#123;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// USE</span></span><br><span class="line"><span class="selector-class">.overflow-box</span>&#123;</span><br><span class="line">  <span class="keyword">@apply</span> --mixin-overflow-ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_mVqPwz" src="//codepen.io/malyw/embed/mVqPwz?height=150&amp;theme-id=178&amp;slug-hash=mVqPwz&amp;user=malyw&amp;default-tab=result" scrolling="no" frameborder="0" height="150" allowtransparency="true" allowfullscreen="true" name="CodePen Embed" title="CodePen Embed" class="cp_embed_iframe " style="width: 100%; overflow: hidden;"></iframe><h4 id="CSS三角形-mixin"><a href="#CSS三角形-mixin" class="headerlink" title="CSS三角形 mixin"></a>CSS三角形 mixin</h4><p>有大量的方法可以使用CSS创建简单的几何图形，最受欢迎的就是<a href="http://www.sitepoint.com/sass-mixin-css-triangles/">使用CSS border绘制三角形</a>。</p><p>让我们为此创建一个简单的mixin：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  --triangle-to-<span class="attribute">bottom</span>: &#123;</span><br><span class="line">    width: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#007bff</span> transparent transparent transparent;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如你所见，我们可以定义大小和颜色的变量。另一个想法就是做一个单独的0宽高的mixin并重用它</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  --zero-size: &#123;</span><br><span class="line">    width: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  --triangle-to-<span class="attribute">bottom</span>-size: <span class="number">50px</span>;</span><br><span class="line">  --triangle-to-<span class="attribute">bottom</span>-<span class="attribute">color</span>: <span class="number">#007bff</span>;</span><br><span class="line"></span><br><span class="line">  --triangle-to-<span class="attribute">bottom</span>: &#123;</span><br><span class="line">    @apply --zero-size;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: var(--triangle-to-bottom-size) var(--triangle-to-bottom-size) <span class="number">0</span> var(--triangle-to-bottom-size);</span><br><span class="line">    <span class="attribute">border-color</span>: var(--triangle-to-bottom-color) transparent transparent transparent;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.triangle-to-bottom</span> &#123;</span><br><span class="line">  <span class="keyword">@apply</span> --triangle-to-bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_grRNZy" src="//codepen.io/malyw/embed/grRNZy?height=150&amp;theme-id=178&amp;slug-hash=grRNZy&amp;user=malyw&amp;default-tab=result" scrolling="no" frameborder="0" height="150" allowtransparency="true" allowfullscreen="true" name="CodePen Embed" title="CodePen Embed" class="cp_embed_iframe " style="width: 100%; overflow: hidden;"></iframe><h3 id="将变量传递给mixins"><a href="#将变量传递给mixins" class="headerlink" title="将变量传递给mixins"></a>将变量传递给mixins</h3><p>根据不同的应用规则把变量传递给mixins将会很有用。</p><p>然而不幸的是，如果你在全局作用域中（<code>:root&#39;）定义了</code>@apply`规则，它将只能使用在那个作用域中的变量，因此不能使用你的局部变量</p><p>虽然不爽，但是至少你还能使用CSS预处理器把mixins复制粘贴到需要的作用域中，直到CSS变量正常</p><p>目前关于这个问题还在讨论</p><h3 id="浏览器支持和fallbacks"><a href="#浏览器支持和fallbacks" class="headerlink" title="浏览器支持和fallbacks"></a>浏览器支持和fallbacks</h3><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><ol><li><p><code>@apply</code>在<a href="https://codereview.chromium.org/1645433002">Chrome Dev and Canary（桌面和移动端）</a>中，开启<code>chrome://flags/#enable-experimental-web-platform-features</code>（<br>实验性网络平台功能）（<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=586974">issue</a>）</p></li><li><p>可以查看<a href="https://www.chromestatus.com/feature/5753701012602880">Chrome Platform Status issue</a>从而获得最新的支持消息</p></li></ol><h4 id="Fallbacks"><a href="#Fallbacks" class="headerlink" title="Fallbacks"></a>Fallbacks</h4><p>看起来似乎现在想用的这个特性话唯一方法就是使用一个PostCSS的插件：<a href="https://github.com/pascalduez/postcss-apply">https://github.com/pascalduez/postcss-apply</a></p><p>它允许自定义属性集的使用</p><p>如你所见“这个插件还是一个早期版本，许多特性还没有被支持”，但是它也包含了一些简单的内容</p><p>同时著名的<a href="https://github.com/MoOx/postcss-cssnext">cssnext</a>插件作者也<a href="https://github.com/MoOx/postcss-cssnext/issues/203">期待一个Pull Request</a>来添加这种特性</p><h3 id="测试浏览器支持"><a href="#测试浏览器支持" class="headerlink" title="测试浏览器支持"></a>测试浏览器支持</h3><p>这有一个<a href="https://gist.github.com/malyw/477cd45bd0ed501a1c3ce0870ae16dd1">复制过来的例子</a>，可以检测<code>@apply</code>规则在浏览器中是否被支持：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testCSSApply</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ID = <span class="string">&#x27;id&#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// include styles</span></span><br><span class="line">  <span class="keyword">const</span> styleEl = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">  styleEl.innerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">  :root &#123;</span></span><br><span class="line"><span class="string">    --<span class="subst">$&#123;ID&#125;</span>: &#123;</span></span><br><span class="line"><span class="string">      font-family: <span class="subst">$&#123;ID&#125;</span>;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  #<span class="subst">$&#123;ID&#125;</span>&#123;</span></span><br><span class="line"><span class="string">    @apply --<span class="subst">$&#123;ID&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">  <span class="built_in">document</span>.head.appendChild(styleEl);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// include element</span></span><br><span class="line">  <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">  el.setAttribute(<span class="string">&#x27;id&#x27;</span>, ID)</span><br><span class="line">  <span class="built_in">document</span>.documentElement.appendChild(el);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// test</span></span><br><span class="line">  <span class="keyword">const</span> styles = getComputedStyle(el);</span><br><span class="line">  <span class="keyword">const</span> doesSupport = styles.fontFamily === ID;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cleaning</span></span><br><span class="line">  <span class="built_in">document</span>.head.removeChild(styleEl);</span><br><span class="line">  <span class="built_in">document</span>.documentElement.removeChild(el);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> doesSupport;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用它也很简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(testCSSApply())&#123;</span><br><span class="line">  <span class="built_in">document</span>.documentElement.className += <span class="string">&#x27; supported&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_yOoMRp" src="//codepen.io/malyw/embed/yOoMRp?default-tab=result&amp;user=malyw&amp;slug-hash=yOoMRp&amp;theme-id=178&amp;height=150" scrolling="no" allowtransparency="true" allowfullscreen="true" name="CodePen Embed" title="CodePen Embed" class="cp_embed_iframe " style="width: 100%; overflow: hidden;" frameborder="0" height="150"></iframe><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>你可以这样想：“CSS又变得越来越难了嘤嘤嘤”：</p><p><img src="https://i.imgur.com/a7sW8y2.gif"></p><p>但是我们已经习惯了CSS预处理器带来的这些概念，换句话说，现在我们将不用任何预处理器就能使用CSS变量和mixins！</p><p>是是是，语法这样并不是很好，但是想想你开始学习使用一门新的预处理器时的感觉</p><p>我倒是觉得这个发展过程会像ES6的进化发展一样：</p><p>为了代替如CoffeeScript一样的转译语言，社区开始为JavaScript添加新的特性，然后到目前为止大多数主流浏览器对其的支持度都达到了80-95%。</p><p>因此希望不久以后，所有的这些你都可以在项目中轻松地使用</p><blockquote><p>原文链接：<a href="https://blog.gospodarets.com/css_apply_rule">CSS @apply rule (native CSS mixins)</a></p><p>原文发布时间：April 11, 2016</p><p>原作者：Serg Gospodarets</p><p>翻译者：IwYvI</p><p>翻译时间：2016/5/5</p></blockquote>]]></content>
    
    
    <summary type="html">【翻译】《CSS @apply rule (native CSS mixins) 》：使用@apply规则，实现CSS原生的mixins。随着CSS的发展，或许我们以后将不再使用CSS预处理器（然而目前这个特性并没有得到广泛的支持），就是这样。</summary>
    
    
    
    <category term="css" scheme="https://www.iwyvi.com/categories/css/"/>
    
    
    <category term="前端" scheme="https://www.iwyvi.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="css" scheme="https://www.iwyvi.com/tags/css/"/>
    
    <category term="翻译" scheme="https://www.iwyvi.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>【译】深入了解CSS自定义属性</title>
    <link href="https://www.iwyvi.com/css/css-properties-in-depth/"/>
    <id>https://www.iwyvi.com/css/css-properties-in-depth/</id>
    <published>2016-04-22T09:25:58.000Z</published>
    <updated>2021-02-17T10:00:38.999Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://blog.gospodarets.com/css_properties_in_depth">CSS custom properties (native variables) In-Depth</a></p><p>原文发布时间：March 29, 2016<br>原作者：Serg Gospodarets</p><p>翻译者：IwYvI</p></blockquote><blockquote><p>这将是我翻译的第一篇文章，主要是关于CSS自定义属性等内容。（这篇文章看上去翻译起来比较简单，（不知道我翻译完了还会不会这么说</p></blockquote><blockquote><p>词汇翻译：</p><ul><li>CSS property：CSS属性</li><li>CSS custom property：CSS自定义属性</li><li>CSS variable：CSS变量</li></ul><p>翻译这篇文章借助了有道、bing、Google的翻译。如果出现不准确的地方希望能向我提出来</p></blockquote><p>在这篇文章中，我本想从解释CSS变量的用途开始说起，但是事实上许多流行的CSS预、后处理器已经实现了这个功能</p><p>几个用途的例子：</p><ul><li>颜色变量</li><li>组件的常量属性（布局，位置属性等等）</li><li>避免代码冗余</li></ul><p>当然，你仍然可以手动在你的代码库里查找或者替换你所想修改的部分，但是这就像在JS中没有定义变量直接使用硬编码的值一样痛苦。动态的和限定作用域的CSS变量将对你的实验和应用程序提供更多功能：你可以自由地阅读，设置和更新它们！同时你可以避免在代码库中造成代码冗余，你可以看看最近的这篇文章<a href="https://webkit.org/blog/5989/css-variables-in-webkit/">Webkit guys did in their Web Inspector</a>。</p><p>同时你终于有了一个可以轻松地从CSS向JS传递数据的接口（例如媒体断点的值(media breakpoint values)）</p><p>下面是CSS属性具有的几个特点：</p><ul><li>它们是动态的，能在运行时被修改</li><li>它们可以轻松地用JS读写</li><li>它们是可继承的，层叠的且有作用域</li></ul><p>下面，让我们深入了解什么是CSS属性和怎么使用它们</p><h3 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h3><p>最开始，这项特性被叫做CSS变量，但是后来被扩展和重构为CSS自定义属性</p><p>然而，根据它所使用的语法，更准确的名称应该是CSS属性。这篇相关文章<a href="http://tabatkins.github.io/specs/css-apply-rule/">CSS @apply rule</a>让我们觉得有点”mixins”的感觉。</p><p>所以目前的名称是<a href="https://drafts.csswg.org/css-variables/">CSS Custom Properties for Cascading Variables</a>（CSS层叠变量的自定义属性）。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables#What_are_CSS_Variables">CSS变量目前有两种形式</a>:</p><blockquote><p>变量是指一个标识符指代一个任意常规的值。<code>var()</code>符号：<code>var(--example-variable)</code>将返回<code>--example-variable</code>的值。</p></blockquote><blockquote><p>自定义属性是指用<code>--*</code>这样的形式表示的属性，其中<code>*</code>代表变量名称。用这种形式给变量赋值：<code>--example-variable: 20px;</code>，这句话表示将变量<code>--example-variable</code>赋值为<code>20px</code>。</p></blockquote><h3 id="第一个CSS变量"><a href="#第一个CSS变量" class="headerlink" title="第一个CSS变量"></a>第一个CSS变量</h3><p>或许这会让你惊讶，因为你有可能已经了解并且使用过一个CSS变量（看起来是第一个）<code>currentColor</code>，这个变量虽然并不是众所周知的但是<a href="https://css-tricks.com/currentcolor/">仍然可以使用</a>并且<a href="http://caniuse.com/#feat=currentcolor">可以在所有浏览器中工作</a>。</p><p>它同样有作用域并且可以被重新定义：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid currentColor; &#125; <span class="comment">/* border-color is red */</span></span><br></pre></td></tr></table></figure><p>如果你加上这一句</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>边框的颜色<a href="http://codepen.io/malyw/pen/yObLEX">将变回黑色</a></p><h3 id="CSS变量的语法"><a href="#CSS变量的语法" class="headerlink" title="CSS变量的语法"></a>CSS变量的语法</h3><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><p>你可以使用<code>--variable-name: variable-value;</code>这个语法来定义一个变量（变量名是大小写敏感的）。而变量的值可以是颜色，字符串等等：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">  --<span class="selector-tag">main</span>-<span class="attribute">color</span>: <span class="number">#4d4e53</span>;</span><br><span class="line">  --<span class="selector-tag">main</span>-bg: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">  --logo-<span class="attribute">border-color</span>: rebeccapurple;</span><br><span class="line">  --<span class="selector-tag">header</span>-<span class="attribute">height</span>: <span class="number">68px</span>;</span><br><span class="line">  --<span class="attribute">content</span>-<span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">  --base-<span class="attribute">line-height</span>: <span class="number">1.428571429</span>;</span><br><span class="line">  --<span class="attribute">transition-duration</span>: .<span class="number">35s</span>;</span><br><span class="line">  --external-link: <span class="string">&quot;external link&quot;</span>;</span><br><span class="line">  --<span class="attribute">margin-top</span>: <span class="built_in">calc</span>(<span class="number">2vh</span> + <span class="number">20px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法似乎看起来很吃藕，但是这是因为<a href="http://www.xanthir.com/blog/b4KT0">种种原因</a>。例如<code>$var</code>这样的变量语法就会被其他的CSS预处理器处理。</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>你可以在CSS像这样用变量：<code>some-css-value: var(--variable-name [, declaration-value]);</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="built_in">var</span>(--p-margin, <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面这个例子中如果<code>--p-margin</code>没有被定义，<code>0 0 10px</code>将被使用。这样的特性会让编写的代码更灵活，例如你可以使用一些来自框架的变量（通常多数变量已经被定义了），但是当你要移除它们的时候这个特性将会节约做其他【高端】的事的时间。</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>正如<a href="https://drafts.csswg.org/css-variables/">module’s documentation title</a>里提到的，自定义属性也遵守<a href="https://drafts.csswg.org/css-cascade-4/#cascade">CSS层叠规则</a>。</p><p>用<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:root"><code>:root scope</code></a>来创建一个全局变量：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">  --global-<span class="selector-tag">var</span>: <span class="string">&#x27;global&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想创建一个只在某个元素或组件里存在的变量，就在那个元素里面[重]定义这个变量（<a href="http://codepen.io/malyw/pen/QNvwRV">demo</a>）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span></span><br><span class="line">  My block is</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block__highlight&quot;</span>&gt;</span>awesome<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">  --block-<span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--block-font-size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block__highlight</span> &#123;</span><br><span class="line">  --block-highlight-<span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--block-highlight-font-size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>媒体查询同样提供了作用域（<a href="http://codepen.io/malyw/pen/grgJJJ">demo</a>）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1025px</span>) &#123;</span><br><span class="line">  <span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    --screen-category: <span class="string">&#x27;desktop&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下一个关于作用域的例子是<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes">伪类</a>（例如：<code>:hover</code>）（<a href="http://codepen.io/malyw/pen/ZWygyv">demo</a>）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  --bg: <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bg);</span><br><span class="line">  <span class="attribute">transition</span>: background-color <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  --bg: <span class="number">#ff0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当定义了全局的自定义变量，为了避免命名冲突，可以看看这篇文章<a href="http://codepen.io/malyw/pen/eZgaQv">a common convention naming your variables</a>（或者更简单地用<a href="http://getbem.com/naming/">BEM naming convention</a>这个方法来命名），例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="comment">/* main (page-wide) variables */</span></span><br><span class="line">  --<span class="selector-tag">main</span>-<span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">  --<span class="selector-tag">main</span>-bg: <span class="built_in">rgb</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">  <span class="comment">/* accordion variables */</span></span><br><span class="line">  --accordion-bg: <span class="number">#f00</span>;</span><br><span class="line">  --accordion-<span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line">  --accordion__item-bg: <span class="number">#ded</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--main-color);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-bg);</span><br><span class="line">  <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用其他变量来赋值"><a href="#用其他变量来赋值" class="headerlink" title="用其他变量来赋值"></a>用其他变量来赋值</h4><p>同样我们可以用其他变量来给变量赋值<code>--variable-name: var(--another-variable-name);</code>（<a href="http://codepen.io/malyw/pen/NNjqWB">demo</a>）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">  --block-text: <span class="string">&#x27;This is my block&#x27;</span>;</span><br><span class="line">  --block-highlight-text: <span class="built_in">var</span>(--block-text)<span class="string">&#x27; with highlight&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block</span>:before &#123;</span><br><span class="line">  content: <span class="built_in">var</span>(--block-text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block__highlight</span>:before &#123;</span><br><span class="line">  content: <span class="built_in">var</span>(--block-highlight-text); <span class="comment">/*This is my block with highlight*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个小问题，就是不能简单地用已定义的变量来计算出新的变量值。但是我们可以用<a href="https://developer.mozilla.org/en/docs/Web/CSS/calc"><code>calc()</code></a>来代替（<a href="http://codepen.io/malyw/pen/GZmJgO">demo</a>）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">  --block-<span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block__highlight</span> &#123;</span><br><span class="line">  <span class="comment">/* DOESN&#x27;T WORK */</span></span><br><span class="line">  --block-highlight-<span class="attribute">font-size</span>: --block-font-size)*<span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--block-highlight-font-size);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* WORKS */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--block-font-size)*<span class="number">1.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，那些很庞大的表达式可能会影响到应用的性能</p><h4 id="使用calc-计算"><a href="#使用calc-计算" class="headerlink" title="使用calc()计算"></a>使用calc()计算</h4><p>上面已经提到你不能像这样使用变量：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>: <span class="built_in">var</span>(--spacer)px</span><br></pre></td></tr></table></figure><p>但是可以使用<code>calc()</code>来进行计算。让我们做一个<a href="http://codepen.io/malyw/pen/MymmNK">vertical rhythm</a>（这个怎么翻译嘤嘤嘤）的例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="built_in">calc</span>(<span class="built_in">var</span>(--base-line-height, <span class="number">0</span>) * <span class="number">1rem</span>);</span><br></pre></td></tr></table></figure><h4 id="重置或继承变量的值"><a href="#重置或继承变量的值" class="headerlink" title="重置或继承变量的值"></a>重置或继承变量的值</h4><p>CSS自定义属性默认是继承的。这种情况下为了减小对块或组件的副作用，你可以<a href="http://codepen.io/malyw/pen/qZReZB">重置自定义属性</a>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.with-reset</span> &#123;</span><br><span class="line">  --bgcolor: initial;<span class="comment">/* RESETS VALUE */</span></span><br><span class="line">  --<span class="attribute">color</span>: green;<span class="comment">/* CHANGES VALUE */</span></span><br><span class="line">  --<span class="attribute">border</span>: inherit;<span class="comment">/* DOESN&#x27;T CHANGE ANYTHING, AS INHERITED BY DEFAULT */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用JavaScript控制自定义属性"><a href="#用JavaScript控制自定义属性" class="headerlink" title="用JavaScript控制自定义属性"></a>用JavaScript控制自定义属性</h3><p>你可以使用JS轻松地读写自定义属性。（<a href="https://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration">CSS样式声明接口</a>(<code>getPropertyValue</code>,<code>setProperty</code>)）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// READ</span></span><br><span class="line"><span class="keyword">const</span> rootStyles = getComputedStyle(<span class="built_in">document</span>.documentElement);</span><br><span class="line"><span class="keyword">const</span> varValue = rootStyles.getPropertyValue(<span class="string">&#x27;--screen-category&#x27;</span>).trim();</span><br><span class="line"><span class="comment">// WRITE</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.setProperty(<span class="string">&#x27;--screen-category&#x27;</span>, value);</span><br></pre></td></tr></table></figure><p>下面是一个DEMO，使用``–screen-category`这个自定义变量代表当前显示类型，它可以在UI界面中被修改。（<a href="http://codepen.io/malyw/pen/grgJJJ">demo</a>）</p><p>这个demo中展示了JS中对自定义变量进行debug的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET</span></span><br><span class="line">alert(</span><br><span class="line">    getComputedStyle(<span class="built_in">document</span>.documentElement).getPropertyValue(<span class="string">&#x27;--screen-category&#x27;</span>).trim();</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SET</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.setProperty(<span class="string">&#x27;--screen-category&#x27;</span>, <span class="string">&#x27;custom&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or reassign from an another prop</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.setProperty(</span><br><span class="line">    <span class="string">&#x27;--screen-category&#x27;</span>, <span class="string">&#x27;var(--default-screen-category, &#x27;</span>%DEFAULT VALUE IF VAR IS NOT SET%<span class="string">&#x27;)&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>现在我们能把任意值赋给CSS变量，也有了接口在JS读写这些变量，这样我们就可以摆脱以前使用的<a href="https://blog.gospodarets.com/passing_data_from_sass_to_js">从CSS/SASS中向JS传递数据</a>这样的方法。（例如：<a href="http://codepen.io/malyw/pen/zGxodr">list of media queries breakpoints</a>）。</p><p>把变量放在<code>content</code>中，将会在页面上输出它的值，这样可以用来做debug：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>:after &#123;</span><br><span class="line">  content: <span class="string">&#x27;--screen-category : &#x27;</span><span class="built_in">var</span>(--screen-category);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h3><p>自定义属性已经可以在Chrome，Firefox和桌面版Safari 9.1里正常使用了：</p><p><img src="https://i.loli.net/2018/09/08/5b935d2c13e90.jpg" alt="browser_support"></p><p style="text-align:center">Stats from <a href="http://caniuse.com/#feat=css-variables">caniuse.com</a></p><p>这个特性在<a href="https://dev.windows.com/en-us/microsoft-edge/platform/status/cssvariables">Microsoft Edge浏览器里的支持还在考虑中</a></p><p>它们目前还有一些限制和bug：</p><ul><li><a href="http://codepen.io/malyw/pen/ONmjzp">用<code>calc()</code>计算CSS变量</a>可能会在某些浏览器上出错</li><li>人们还在讨论<a href="https://github.com/w3c/webcomponents/issues/300#issuecomment-144551648">为当前作用域中的自定义属性添加一些基础规则</a>，例如<code>--: initial;</code></li><li>不能使用常规CSS属性名称： <del><code>var(--side): 10px;</code></del></li><li>用<code>calc()</code>计算时需要这样写：<code>calc(var(--base-line-height, 0) * 1rem)</code></li><li>不能当做媒体查询的值 <del><code>@media screen and (min-width: var(--desktop-breakpoint))</code></del></li><li>图片的url也不可以使用变量 <del><code>url(var(--image-url))</code></del></li></ul><p>这里有个<a href="http://codepen.io/malyw/pen/GZmzPG">DEMO</a>可以用来测试浏览器对CSS自定义属性的支持。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@supports</span> ( (<span class="attribute">--a</span>: <span class="number">0</span>)) &#123;</span><br><span class="line">  <span class="comment">/* supported */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@supports</span> ( <span class="keyword">not</span> (<span class="attribute">--a</span>: <span class="number">0</span>)) &#123;</span><br><span class="line">  <span class="comment">/* not supported */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.CSS &amp;&amp; <span class="built_in">window</span>.CSS.supports &amp;&amp; <span class="built_in">window</span>.CSS.supports(<span class="string">&#x27;--a&#x27;</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;CSS properties are supported&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">&#x27;CSS properties are NOT supported&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于以前的浏览器（<a href="http://caniuse.com/#feat=css-featurequeries">没有 CSS.sgpports() API</a>），你可以看看<a href="https://gist.github.com/wesbos/8b9a22adc1f60336a699">Wes Bos’ test</a>。</p><h3 id="Fallbacks-polyfills"><a href="#Fallbacks-polyfills" class="headerlink" title="Fallbacks/polyfills"></a>Fallbacks/polyfills</h3><p>（这个标题似乎并没有什么中文词语能直接翻译，大意就是让老浏览器支持新功能）</p><blockquote><p>接下来这两段翻译的实在是有些勉强</p></blockquote><blockquote><p>There are couple examples of PostCSS plugins, but <code>no plugin can achieve true complete parity according to the specification because of the DOM cascade unknowns</code> + they are not dynamic.</p><p>It might be solved when we see the bright future and CSS Houdini group dream of implementing <a href="https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/">an easy native way for CSS “polyfills” to all major browsers</a> will come true. And even in that case variables syntax, most of all, cannot be shimmed.</p></blockquote><p>现在已经有许多关于PostCSS插件的例子，但是这些插件都不能根据规范真正实现对等处理，因为DOM层叠结构对它们是未知的，而且这些插件所做的处理也是非动态的。</p><p>这个问题最终将会被解决，CSS Houdini组织提出的<a href="https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/">an easy native way for CSS “polyfills” to all major browsers</a>，应该会实现，我们也可以看得出CSS广阔的前景。最重要的是在这种情况下，变量语法不再会被忽视。</p><p>然而到目前为止有这样一个清单：</p><ul><li><a href="https://github.com/postcss/postcss-custom-properties">转换W3C CSS自定义属性的PostCSS插件</a>- 一个只处理<code>:root</code>里声明的变量的插件</li><li><a href="https://github.com/MadLittleMods/postcss-css-variables">将CSS自定义属性（CSS变量）的语法转换为静态的语句</a>，这有一个<a href="https://madlittlemods.github.io/postcss-css-variables/playground/">在线的DEMO</a>。它尝试处理了媒体查询、伪类元素和元素嵌套这些部分的作用域问题。</li><li><a href="https://github.com/segmentio/myth">Myth</a>- 一个预处理器</li><li><a href="https://github.com/MoOx/postcss-cssnext">CSS next</a>，为CSS添加新的语法</li></ul><h3 id="和CSS预处理器（SCSS）一起使用"><a href="#和CSS预处理器（SCSS）一起使用" class="headerlink" title="和CSS预处理器（SCSS）一起使用"></a>和CSS预处理器（SCSS）一起使用</h3><h4 id="相同的变量名"><a href="#相同的变量名" class="headerlink" title="相同的变量名"></a>相同的变量名</h4><p>现在开始和预处理器一起使用CSS自定义属性，我们可以使用<a href="http://codepen.io/malyw/pen/grRQeq">一种混合语法来检查浏览器的支持</a></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@supports</span> ( (<span class="attribute">--a</span>: <span class="number">0</span>)) &#123;</span><br><span class="line">  <span class="comment">/* Custom properties are supported in the browser */</span></span><br><span class="line">  <span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    --<span class="selector-tag">main</span>-bg: <span class="number">#4d4e53</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: var(--main-bg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@supports</span> ( <span class="keyword">not</span> (<span class="attribute">--a</span>: <span class="number">0</span>)) &#123;</span><br><span class="line">  <span class="comment">/* Custom properties are NOT supported in the browser */</span></span><br><span class="line">  <span class="variable">$main-bg</span>: <span class="number">#4d4e53</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$main-bg</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下CSS和Sass的变量都存在，但是只有在浏览器不支持自定义属性时Sass变量才会被使用。</p><p>或者你可以把这种逻辑<a href="http://codepen.io/malyw/pen/aNwKKv">藏在Sass的mixin中</a>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> setVar(<span class="variable">$varName</span>, <span class="variable">$value</span>)&#123;</span><br><span class="line">  <span class="keyword">@include</span> setVarSass(<span class="variable">$varName</span>, <span class="variable">$value</span>);</span><br><span class="line">  <span class="keyword">@include</span> setVarCss(<span class="variable">$varName</span>, <span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> setPropFromVar(<span class="variable">$propName</span>, <span class="variable">$varName</span>)&#123;</span><br><span class="line">  <span class="keyword">@supports</span> ( (<span class="attribute">--a</span>: <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="comment">// Custom properties are supported in the browser</span></span><br><span class="line">    #&#123;<span class="variable">$propName</span>&#125;: getVarCss(<span class="variable">$varName</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@supports</span> ( <span class="keyword">not</span> (<span class="attribute">--a</span>: <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="comment">// Custom properties are NOT supported in the browser</span></span><br><span class="line">    #&#123;<span class="variable">$propName</span>&#125;: getVarSass(<span class="variable">$varName</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SET</span></span><br><span class="line"><span class="keyword">@include</span> setVar(<span class="string">&#x27;main-color&#x27;</span>, <span class="number">#f00</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> setPropFromVar(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;main-color&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>在Sass和CSS中变量的作用域是不同的，但是它们都可以这样做：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* SCSS */</span></span><br><span class="line"><span class="variable">$main-color</span>: <span class="number">#f00</span> !global;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    --<span class="selector-tag">main</span>-<span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="给没有赋值的变量赋值"><a href="#给没有赋值的变量赋值" class="headerlink" title="给没有赋值的变量赋值"></a>给没有赋值的变量赋值</h3><p>一个常见的情况是，我们希望使用一个变量给另一个变量赋值时，如果用于赋值的变量本身没有被赋值，则需要一个默认值来赋给新的变量。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* SCSS */</span></span><br><span class="line"><span class="variable">$main-color</span>: <span class="number">#f00</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$main-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而你并不能在CSS里这样做：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    --<span class="selector-tag">main</span>-<span class="attribute">color</span>: <span class="built_in">var</span>(--main-color, <span class="number">#f00</span>); <span class="comment">/* DOESN&#x27;T WORK */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是你可以创建一个新的变量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    --local-<span class="selector-tag">main</span>-<span class="attribute">color</span>: <span class="built_in">var</span>(--main-color, <span class="number">#f00</span>); <span class="comment">/* DOES WORK */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--local-main-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者直接使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS */</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--main-color, <span class="number">#f00</span>); <span class="comment">/* DOES WORK */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有趣的用法"><a href="#有趣的用法" class="headerlink" title="有趣的用法"></a>有趣的用法</h3><p>自定义属性提出了这些有趣的想法：</p><ul><li>现在可以使用原生的方法来处理CSS与JS的通信，而不是<a href="https://css-tricks.com/making-sass-talk-to-javascript-with-json/">以前用的hack方法</a></li><li>另一个例子是<a href="http://codepen.io/malyw/pen/grgVGx">国际化地使用自定义属性</a>，不同语言中的text和colors可以使用<code>external link</code>来解决</li><li>Jake Archibald 提出了一个想法：根据加载到页面的块和样式，使用CSS变量控制元素的可见性（<a href="https://jakearchibald.com/2016/css-loading-with-custom-props/">文章链接</a>）</li><li>主题切换：现在不必再为特定class添加CSS样式或者增加新的CSS样式文件来改变网站主题，你可以使用自定义属性来解决这个问题。Michael Scharnagl在<a href="https://justmarkup.com/log/2016/02/theme-switcher-using-css-custom-properties/">这篇文章</a>中描述了如何处理主题切换。</li><li>我还想到了一些用法，例如用于特定域名（对 domain1.site.com和domain1.site.com提供不同的外观）（原文如此）。这样我们就可以很轻松上传并应用重定义了自定义属性的CSS文件（取决于域名）</li></ul><p>最后一个想法很贴近使用自定义属性的主题切换，所以可以把他们放在一起用（<a href="https://blog.gospodarets.com/demos/css-custom-props-theme-switcher/">demo</a>）</p><p><a href="https://blog.gospodarets.com/demos/css-custom-props-theme-switcher/"><img src="https://i.imgur.com/DwLCfC0.gif"></a></p><ul><li>当然，自定义属性在<a href="http://codepen.io/malyw/pen/KzZXRq?editors=1100">补全CSS属性</a>这里看起来也很好用</li></ul><p><a href="http://codepen.io/malyw/pen/KzZXRq?editors=1100"><img src="https://i.imgur.com/E0FTuI1.jpg"></a></p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>受到Wes Bos <a href="https://twitter.com/wesbos/status/697808716905652224">demos of interacting with CSS custom properties</a>的启发，我决定更进一步在CSS中使用<code>calc();</code>对颜色的R,G,B值进行计算。</p><p>这是灰度过滤器的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grayscale</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(</span><br><span class="line">    <span class="built_in">calc</span>(<span class="number">0.2126</span> * <span class="built_in">var</span>(--r)),</span><br><span class="line">    <span class="built_in">calc</span>(<span class="number">0.7152</span> * <span class="built_in">var</span>(--g)),</span><br><span class="line">    <span class="built_in">calc</span>(<span class="number">0.0722</span> * <span class="built_in">var</span>(--b)),</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.gospodarets.com/demos/css-colors-from-custom-props/">DEMO</a></p><p><a href="https://blog.gospodarets.com/demos/css-colors-from-custom-props/"><img src="https://i.imgur.com/9IUE3FR.gif"></a></p><p>有趣的事实：</p><ul><li>Chrome似乎并不喜欢<code>calc()</code>中的CSS变量的非整数乘除法</li><li>Firefox完全不计算<code>rgba()</code>里面需要使用<code>calc()</code>计算的自定义变量</li><li>Demo在Safari里能达到预期效果O(∩_∩)O~~（原本是个emoji表情）</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>现在你应该已经知道了CSS自定义变量的含义和如下几点：</p><ul><li>它的语法支持CSS和JS的交互</li><li>它是动态的、可继承的、层叠的和有作用域的</li><li>浏览器的支持和它的fallbacks</li><li>它可以和Sass变量一起使用</li><li>总之，通过一些有趣的用法和示例，自定义属性确实为开发者和web平台加入了新的能力</li></ul><p>我希望读完这篇文章后你能用上自定义属性</p><h3 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h3><p>近期CSS原生mixins语法发布 - <a href="http://www.iwyvi.com/css/css-apply-rule">【译】CSS @apply规则(mixins)</a></p><blockquote><p>原文链接：<a href="https://blog.gospodarets.com/css_properties_in_depth">CSS custom properties (native variables) In-Depth</a></p><p>原文发布时间：March 29, 2016</p><p>原作者：Serg Gospodarets</p><p>翻译者：IwYvI</p><p>翻译时间：2016/4/22</p><p>第一次翻译英语文章，如有不准确的地方希望向我提出来</p></blockquote>]]></content>
    
    
    <summary type="html">【翻译】《CSS custom properties (native variables) In-Depth》：CSS自定义属性是一项新的CSS特性，它是一种在CSS中定义的变量，我们可以用这些变量实现一些新的功能，同时CSS自定义属性也提供了CSS与JS交互的新方式，与其他CSS预处理器也能做到完美配合。</summary>
    
    
    
    <category term="css" scheme="https://www.iwyvi.com/categories/css/"/>
    
    
    <category term="前端" scheme="https://www.iwyvi.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="css" scheme="https://www.iwyvi.com/tags/css/"/>
    
    <category term="翻译" scheme="https://www.iwyvi.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Color Picker</title>
    <link href="https://www.iwyvi.com/angular/color-picker/"/>
    <id>https://www.iwyvi.com/angular/color-picker/</id>
    <published>2016-03-28T07:59:15.000Z</published>
    <updated>2021-02-17T10:00:38.998Z</updated>
    
    <content type="html"><![CDATA[<p>这个是16年寒假的时候学习<code>angular</code>时写的一个demo，可以实现颜色HEX、RGB、HSB转换，因为是初学所以有什么用什么，写的代码也很乱，所以就不在github上建一个项目放了，代码空间见<a href="https://coding.net/u/IwYvI/p/ColorPicker/git">ColorPicker</a>。<a id="more"></a></p><iframe src="https://euscj2.coding-pages.com/" frameborder="0" style="width:100%;height: 650px;overflow: hidden;"></iframe><p><strong>演示在IE下完全跪了，不用看了</strong></p><p>整体的样式参照了dribble上的<a href="https://dribbble.com/shots/2415041-Daily-UI-45-Colorrrs">Ranjith Alingal</a>所做的图，使用angular对数据和view层进行了绑定，同时将color储存在localStorage里。</p><p><em>本来是想直接在post的文章里面放这份演示的，然后发现jekyll会解析两个大括号，然后导致angular绑定的直接跪了，所以最后使用了coding的pages用iframe来处理演示</em></p><h6 id="关于颜色转换"><a href="#关于颜色转换" class="headerlink" title="关于颜色转换"></a>关于颜色转换</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HEX to RGB</span></span><br><span class="line"><span class="keyword">var</span> HexToRgb = <span class="function"><span class="keyword">function</span>(<span class="params">hex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rgb = &#123;<span class="attr">r</span>:<span class="number">0</span>,<span class="attr">g</span>:<span class="number">0</span>,<span class="attr">b</span>:<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/^#&#123;0,1&#125;([0-9a-fA-f]&#123;3&#125;|[0-9a-fA-f]&#123;6&#125;)$/</span>.test(hex))&#123;</span><br><span class="line">        <span class="keyword">var</span> aNum = hex.replace(<span class="regexp">/#/</span>,<span class="string">&quot;&quot;</span>).split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(aNum.length === <span class="number">6</span>)&#123;</span><br><span class="line">            rgb.r = <span class="built_in">parseInt</span>(<span class="string">&quot;0x&quot;</span> + aNum[<span class="number">0</span>] + aNum[<span class="number">1</span>]);</span><br><span class="line">            rgb.g = <span class="built_in">parseInt</span>(<span class="string">&quot;0x&quot;</span> + aNum[<span class="number">2</span>] + aNum[<span class="number">3</span>]);</span><br><span class="line">            rgb.b = <span class="built_in">parseInt</span>(<span class="string">&quot;0x&quot;</span> + aNum[<span class="number">4</span>] + aNum[<span class="number">5</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(aNum.length === <span class="number">3</span>)&#123;</span><br><span class="line">            rgb.r = <span class="built_in">parseInt</span>(<span class="string">&quot;0x&quot;</span> + aNum[<span class="number">0</span>] + aNum[<span class="number">0</span>]);</span><br><span class="line">            rgb.g = <span class="built_in">parseInt</span>(<span class="string">&quot;0x&quot;</span> + aNum[<span class="number">1</span>] + aNum[<span class="number">1</span>]);</span><br><span class="line">            rgb.b = <span class="built_in">parseInt</span>(<span class="string">&quot;0x&quot;</span> + aNum[<span class="number">2</span>] + aNum[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rgb;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RGB to HEX</span></span><br><span class="line"><span class="keyword">var</span> RgbToHex = <span class="function"><span class="keyword">function</span>(<span class="params">r,g,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hex = [];</span><br><span class="line">    <span class="keyword">if</span>(r &lt; <span class="number">16</span>)&#123;</span><br><span class="line">        hex.push(<span class="string">&quot;0&quot;</span> + <span class="built_in">Number</span>(r).toString(<span class="number">16</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        hex.push(<span class="built_in">Number</span>(r).toString(<span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(g &lt; <span class="number">16</span>)&#123;</span><br><span class="line">        hex.push(<span class="string">&quot;0&quot;</span> + <span class="built_in">Number</span>(g).toString(<span class="number">16</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        hex.push(<span class="built_in">Number</span>(g).toString(<span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(b &lt; <span class="number">16</span>)&#123;</span><br><span class="line">        hex.push(<span class="string">&quot;0&quot;</span> + <span class="built_in">Number</span>(b).toString(<span class="number">16</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        hex.push(<span class="built_in">Number</span>(b).toString(<span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> + hex[<span class="number">0</span>] + hex[<span class="number">1</span>] + hex[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RGB to HSB</span></span><br><span class="line"><span class="keyword">var</span> RgbToHsb = <span class="function"><span class="keyword">function</span>(<span class="params">r,g,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rgb_Min = <span class="built_in">Math</span>.min(<span class="built_in">Math</span>.min(r,g),b);</span><br><span class="line">    <span class="keyword">var</span> rgb_Max = <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.max(r,g),b);</span><br><span class="line">    <span class="keyword">var</span> hsb = &#123;<span class="attr">h</span>:<span class="number">0</span>,<span class="attr">s</span>:<span class="number">0</span>,<span class="attr">b</span>:<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(rgb_Min == rgb_Max) &#123;</span><br><span class="line">        hsb.h = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(rgb_Max == r &amp;&amp; g &gt;= b) &#123;</span><br><span class="line">        hsb.h = <span class="number">60</span> * ( (g - b) / (rgb_Max - rgb_Min) );</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(rgb_Max == r &amp;&amp; g &lt; b) &#123;</span><br><span class="line">        hsb.h = <span class="number">60</span> * ( (g - b) / (rgb_Max - rgb_Min) ) + <span class="number">360</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(rgb_Max == g) &#123;</span><br><span class="line">        hsb.h = <span class="number">60</span> * ( (b - r) / (rgb_Max - rgb_Min) ) + <span class="number">120</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(rgb_Max == b) &#123;</span><br><span class="line">        hsb.h = <span class="number">60</span> * ( (r - g) / (rgb_Max - rgb_Min) ) + <span class="number">240</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hsb.h = (hsb.h&gt;=<span class="number">360</span>) ? <span class="number">0</span> : <span class="built_in">Math</span>.round(hsb.h);</span><br><span class="line">    <span class="keyword">if</span>(rgb_Max === <span class="number">0</span> )&#123;</span><br><span class="line">        hsb.s = <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        hsb.s = <span class="built_in">Math</span>.round((<span class="number">1</span>-(rgb_Min/rgb_Max))*<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    hsb.b = <span class="built_in">Math</span>.round(rgb_Max/<span class="number">255</span>*<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">return</span> hsb;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//HSB to RGB</span></span><br><span class="line"><span class="keyword">var</span> HsbToRgb = <span class="function"><span class="keyword">function</span>  (<span class="params">h,s,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rgb = &#123;<span class="attr">r</span>:<span class="number">0</span>,<span class="attr">g</span>:<span class="number">0</span>,<span class="attr">b</span>:<span class="number">0</span>&#125;;</span><br><span class="line">    s/=<span class="number">100</span>;</span><br><span class="line">    b/=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(s === <span class="number">0</span>)&#123;</span><br><span class="line">        rgb.r= rgb.g = rgb.b = <span class="built_in">Math</span>.round(b * <span class="number">255</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="built_in">Math</span>.floor(h / <span class="number">60</span>)%<span class="number">6</span>;</span><br><span class="line">        <span class="keyword">var</span> f = h/<span class="number">60</span> -i;</span><br><span class="line">        <span class="keyword">var</span> p = b*(<span class="number">1</span>-s);</span><br><span class="line">        <span class="keyword">var</span> q = b*(<span class="number">1</span>-s*f);</span><br><span class="line">        <span class="keyword">var</span> t = b*(<span class="number">1</span>-s*(<span class="number">1</span>-f));</span><br><span class="line">        <span class="keyword">switch</span>(i)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            rgb.r = b;</span><br><span class="line">            rgb.g = t;</span><br><span class="line">            rgb.b = p;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            rgb.r = q;</span><br><span class="line">            rgb.g = b;</span><br><span class="line">            rgb.b = p;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            rgb.r = p;</span><br><span class="line">            rgb.g = b;</span><br><span class="line">            rgb.b = t;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            rgb.r = p;</span><br><span class="line">            rgb.g = q;</span><br><span class="line">            rgb.b = b;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            rgb.r = t;</span><br><span class="line">            rgb.g = p;</span><br><span class="line">            rgb.b = b;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            rgb.r = b;</span><br><span class="line">            rgb.g = p;</span><br><span class="line">            rgb.b = q;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rgb.r = <span class="built_in">Math</span>.round(rgb.r * <span class="number">255</span>);</span><br><span class="line">        rgb.g = <span class="built_in">Math</span>.round(rgb.g * <span class="number">255</span>);</span><br><span class="line">        rgb.b = <span class="built_in">Math</span>.round(rgb.b * <span class="number">255</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rgb;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个是16年寒假的时候学习&lt;code&gt;angular&lt;/code&gt;时写的一个demo，可以实现颜色HEX、RGB、HSB转换，因为是初学所以有什么用什么，写的代码也很乱，所以就不在github上建一个项目放了，代码空间见&lt;a href=&quot;https://coding.net/u/IwYvI/p/ColorPicker/git&quot;&gt;ColorPicker&lt;/a&gt;。</summary>
    
    
    
    <category term="angular" scheme="https://www.iwyvi.com/categories/angular/"/>
    
    
    <category term="angular" scheme="https://www.iwyvi.com/tags/angular/"/>
    
    <category term="前端" scheme="https://www.iwyvi.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="颜色" scheme="https://www.iwyvi.com/tags/%E9%A2%9C%E8%89%B2/"/>
    
  </entry>
  
  <entry>
    <title>Hello Vizory</title>
    <link href="https://www.iwyvi.com/jekyll/hello-vizory/"/>
    <id>https://www.iwyvi.com/jekyll/hello-vizory/</id>
    <published>2016-03-25T16:13:15.000Z</published>
    <updated>2021-02-17T10:00:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>这将会是博客的第一篇文章，之前的测试文章会在近期全部删除。</p><p>Vizory是我设计的第一个博客主题，本来的是让想别人先看看效果图提出修改意见以后再写预览，然而我就直接动手了，代码空间在这里<a href="https://git.oschina.net/iwyvi/vizory-design">vizory-design</a>。首页强行使用黑白对比，布局部分参考了Dribbble上的一个页面的设计。<a id="more"></a></p><p><img src="https://i.loli.net/2018/09/08/5b935e8ff2406.jpg"></p><p>这就是页面的预览图，现在看来似乎在宽屏状态还是空的部分些多，本意是纸片不同层次的覆盖，然后导航栏的状态是一份日历被正文压住了只留出导航部分。（同时因为使用了<code>transform: rotate()</code>，所以层次覆盖和div切割还有许多问题，所以有些地方还是做了一定的妥协，比如正中间那张卡片上的绿色icon）</p><blockquote><p>其实本来页面的设计并不是这样的，本来想使用我之前写的一个插件<a href="https://github.com/IwYvI/particleChar">particleChar</a>，后来放弃了，因为设计的实在是太吃藕</p></blockquote><p>然后选择博客生成工具，当时我只知道Github Pages推荐的jekyll，所以直接看了一些教程，然后开始的时候直接选择了jekyll来驱动博客。但是因为jekyll必须在ruby环境下面使用，然而在我的Windows上，ruby已经配置成功了，但是jekyll却迟迟不能正常使用，所以转用虚拟机开linux处理，然后代码先传到git空间然后在pull回来<em>（不使用共享文件夹的原因是因为曾经似乎就是因为使用的共享文件夹然后忘了干了什么导致linux崩了）</em>。这样本来就很麻烦，后来直到我发现jeky本身似乎不带categories生成，必须要用插件，而且，那个插件似乎已经不能用了，我也不可能因为一个插件而学习ruby，所以当时，我就想找到一个替代品。</p><p>后来经过搜索发现，静态博客生成工具有很多，然后hexo似乎挺厉害的，所以也有考虑再转为hexo，毕竟本身主题并不复杂，转换起来也比较方便。但是，经过今天一下午加一晚上加一早上的努力（强行努力），我还是感觉不是很适应hexo。hexo使用ejs作为模板，然后使用stylus预处理css，然而目前我只使用过scss，同时我还是觉得，hexo看起来井井有条的theme还是比较复杂和乱。虽然最后转换基本成功，但是我觉得还是暂时jekyll更适合我，所以到目前为止，整体博客还是使用jekyll生成。</p><p>好久没有像这样正式写过什么了，导致我写一句话根本不想加标点符号以及各种语序混乱，再加上第一次写这么多markdown，总是在找有没有什么符号可以使用上，就写这么多把以后再修改（我感觉似乎不会了）</p><h6 id="2016-3-26"><a href="#2016-3-26" class="headerlink" title="2016.3.26"></a>2016.3.26</h6>]]></content>
    
    
    <summary type="html">&lt;p&gt;这将会是博客的第一篇文章，之前的测试文章会在近期全部删除。&lt;/p&gt;
&lt;p&gt;Vizory是我设计的第一个博客主题，本来的是让想别人先看看效果图提出修改意见以后再写预览，然而我就直接动手了，代码空间在这里&lt;a href=&quot;https://git.oschina.net/iwyvi/vizory-design&quot;&gt;vizory-design&lt;/a&gt;。首页强行使用黑白对比，布局部分参考了Dribbble上的一个页面的设计。</summary>
    
    
    
    <category term="jekyll" scheme="https://www.iwyvi.com/categories/jekyll/"/>
    
    
    <category term="vizory" scheme="https://www.iwyvi.com/tags/vizory/"/>
    
    <category term="theme" scheme="https://www.iwyvi.com/tags/theme/"/>
    
    <category term="jekyll" scheme="https://www.iwyvi.com/tags/jekyll/"/>
    
  </entry>
  
</feed>
